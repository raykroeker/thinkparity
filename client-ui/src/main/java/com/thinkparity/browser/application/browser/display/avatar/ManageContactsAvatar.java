/*
 * Mar 10, 2006
 */
package com.thinkparity.browser.application.browser.display.avatar;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;

import com.thinkparity.browser.application.browser.display.avatar.session.UserListCellRenderer;
import com.thinkparity.browser.application.browser.display.provider.FlatContentProvider;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.State;

import com.thinkparity.model.xmpp.contact.Contact;
import com.thinkparity.model.xmpp.user.User;

/**
 * @author raykroeker@gmail.com
 * @version 1.1
 */
public class ManageContactsAvatar extends Avatar {

	/**
	 * @see java.io.Serializable
	 * 
	 */
	private static final long serialVersionUID = 1;

	// Variables declaration - do not modify
	private javax.swing.JButton closeJButton;

	private javax.swing.JList contactsJList;

	private javax.swing.JScrollPane contactsJListJScrollPane;

	/**
	 * List model for the contacts.
	 * 
	 */
	private DefaultListModel contactsModel;

	private javax.swing.JLabel eaJLabel;

	private javax.swing.JButton inviteJButton;
	// End of variables declaration
	/**
	 * Create a ManageContactsAvatar.
	 * 
	 */
	public ManageContactsAvatar() {
		// COLOR ManageContacts Background
		super("ManageContacts", Color.WHITE);
		initComponents();
	}
	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getId()
	 * 
	 */
	public AvatarId getId() { return AvatarId.SESSION_MANAGE_CONTACTS; }
	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getState()
	 * 
	 */
	public State getState() { return null; }

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#reload()
	 * 
	 */
	public void reload() {
		reloadContacts();
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#setState(com.thinkparity.browser.platform.util.State)
	 * 
	 */
	public void setState(final State state) {}

	/**
	 * Close the window.
	 * 
	 * @param e
	 *            The action event.
	 */
	private void closeJButtonActionPerformed(final ActionEvent e) {
		SwingUtilities.getWindowAncestor(this).dispose();
	}

	/**
	 * Obtain the list of contacts.
	 * 
	 * @return The list of contacts.
	 */
	private Contact[] getContacts() {
		return (Contact[]) ((FlatContentProvider) contentProvider).getElements(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
        contactsJListJScrollPane = new javax.swing.JScrollPane();
        contactsJList = new javax.swing.JList();
		contactsJList.setCellRenderer(new UserListCellRenderer());
        contactsModel = new DefaultListModel();
        contactsJList.setModel(contactsModel);

        eaJLabel = new javax.swing.JLabel();
        inviteJButton = new javax.swing.JButton();
        closeJButton = new javax.swing.JButton();

        contactsJListJScrollPane.setViewportView(contactsJList);

        eaJLabel.setText(getString("EmbeddedAssistance"));
        inviteJButton.setText(getString("InviteButton"));
        inviteJButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				inviteJButtonActionPerformed(e);
			}
        });
        closeJButton.setText(getString("CloseButton"));
        closeJButton.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent e) {
				closeJButtonActionPerformed(e);
			}
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(contactsJListJScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .add(eaJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(inviteJButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(closeJButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(eaJLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(contactsJListJScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(closeJButton)
                    .add(inviteJButton))
                .addContainerGap())
        );
    }// </editor-fold>

	private void inviteJButtonActionPerformed(final ActionEvent e) {
		closeJButtonActionPerformed(e);
		getController().displaySessionInviteContact();
	}

	/**
	 * Load the list model with a list of users.
	 * 
	 * @param listModel
	 *            The list model.
	 * @param users
	 *            The list of users.
	 */
	private void loadUserList(final DefaultListModel listModel,
			final User[] users) {
		for(final User user : users) {
			logger.debug("Adding user:  " + user.getSimpleUsername());
			listModel.addElement(user);
		}
	}

	/**
	 * Reload the list of contacts.
	 *
	 */
	private void reloadContacts() {
		contactsModel.clear();
		loadUserList(contactsModel, getContacts());
	}
}
