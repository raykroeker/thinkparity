<?xml version="1.0"?>
<project name="ophelia" default="help" basedir=".">
    <property name="build.sysclasspath" value="ignore"/>

    <!-- release configuration -->
    <property name="release.version" value="1.0.0-RC7"/>
    <property name="release.serverhost" value="thinkparity.dyndns.org"/>

    <!-- cvs configuration -->
    <property name="cvs.cvsroot" value=":pserver:maven:pr3t0r1a@tpdev.thinkparity.com:2401/home/cvs/repositories/thinkparity.com"/>
    <property name="cvs.modules" value="opheliaSource opheliaLibs opheliaLibsWin32"/>
    <property name="cvs.modules.ide" value="opheliaEclipse"/>
    <property name="cvs.tag" value="v1_0"/>

    <!-- output directories -->
	<property name="target.dir" value="${basedir}/target"/>
	<property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.javadoc.dir" value="${target.dir}/docs/api"/>
    <property name="target.release.dir" value="${target.dir}/release"/>
	<property name="target.test-classes.dir" value="${target.dir}/test-classes"/>
	<property name="target.test-sessions.dir" value="${target.dir}/test-sessions"/>

    <!-- source files -->
	<path id="project.sourcepath">
		<pathelement location="${basedir}/common/codebase/src/main/java"/>
		<pathelement location="${basedir}/common/migrator/src/main/java"/>
		<pathelement location="${basedir}/local/browser/src/main/java"/>
		<pathelement location="${basedir}/local/model/src/main/java"/>
		<pathelement location="${basedir}/local/thinkparity/src/main/java"/>
	</path>

    <!-- source files for the junit test code -->
	<path id="project.test-sourcepath">
		<pathelement location="${basedir}/common/junitx/src/main/java"/>
		<pathelement location="${basedir}/common/codebase/src/test/java"/>
		<pathelement location="${basedir}/local/browser/src/test/java"/>
		<pathelement location="${basedir}/local/model/src/test/java"/>
	</path>

    <!-- runtime vendor libs -->
    <fileset id="project.runtimevendorlib" dir="${basedir}/vendor">
        <include name="commons-codec/1.3/commons-codec.jar"/>
        <include name="hsqldb/1.8.0.2/hsqldb.jar"/>
		<include name="jdic/0.9.1/jdic.jar"/>
        <include name="log4j/1.2.13/log4j.jar"/>
		<include name="lucene/1.9.1/lucene.jar"/>
		<include name="smack/2.2.1/smack.jar"/>
		<include name="smackx/2.2.1/smackx.jar"/>
		<include name="swing-layout/1.0/swing-layout.jar"/>
		<include name="xpp3/1.1.3.4.O/xpp3.jar"/>
		<include name="xstream/1.1.2/xstream.jar"/>
    </fileset>

    <!-- runtime vendor win32 libs -->
    <fileset id="project.runtimevendorlibwin32" dir="${basedir}/vendor/i686/win32">
        <include name="jdic/0.9.1/tray.dll"/>
    </fileset>   

    <!-- compile classpath -->
	<path id="project.classpath">
		<pathelement location="${target.classes.dir}"/>
		<pathelement location="${basedir}/vendor/log4j/1.2.13/log4j.jar"/>
		<pathelement location="${basedir}/vendor/xpp3/1.1.3.4.O/xpp3.jar"/>
		<pathelement location="${basedir}/vendor/xstream/1.1.2/xstream.jar"/>
		<pathelement location="${basedir}/vendor/smack/2.2.1/smack.jar"/>
		<pathelement location="${basedir}/vendor/smackx/2.2.1/smackx.jar"/>
		<pathelement location="${basedir}/vendor/lucene/1.9.1/lucene.jar"/>
		<pathelement location="${basedir}/vendor/swing-layout/1.0/swing-layout.jar"/>
		<pathelement location="${basedir}/vendor/commons-codec/1.3/commons-codec.jar"/>
		<pathelement location="${basedir}/vendor/jdic/0.9.1/jdic.jar"/>
	</path>

    <!-- test classpath (test compile and test run) -->
    <path id="project.test-classpath">
        <pathelement location="${target.test-classes.dir}"/>
        <pathelement location="${basedir}/vendor/junit/3.8.1/junit.jar"/>
        <pathelement location="${basedir}/vendor/hsqldb/1.8.0.2/hsqldb.jar"/>
    </path>

    <!-- checkout source -->
    <target name="checkout">
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.tag}"/>
        <echo message="${cvs.modules}"/>
        <cvs cvsroot="${cvs.cvsroot}"
            command="checkout" tag="${cvs.tag}" package="${cvs.modules}"
            dest="${basedir}"/>
    </target>

    <!-- update source -->
    <target name="update">
        <echo message="${cvs.cvsroot}"/>
        <cvs cvsroot="${cvs.cvsroot}" command="update -P"/>
    </target>
   
    <!-- checkout ide files -->
    <target name="checkout.ide">
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.tag}"/>
        <echo message="${cvs.modules.ide}"/>
        <cvs cvsroot="${cvs.cvsroot}"
            command="export -d &quot;${basedir}/ide&quot;" tag="${cvs.tag}" package="${cvs.modules.ide}"
            dest="${basedir}"/>
        <move todir="${basedir}">
            <fileset dir="${basedir}/ide"/>
        </move>
    </target>

    <!-- delete output -->
	<target name="clean">
		<delete dir="${target.dir}"/>
	</target>

    <!-- compile -->
	<target name="compile" depends="init,process-resources">
        <!-- if the compile.debug is not set; use true as a default otherwise
             use the value itself -->
        <condition property="compile.innerDebug" value="${compile.debug}" else="true">
            <isset property="compile.debug"/>
        </condition>
		<javac destdir="${target.classes.dir}" debug="${compile.innerDebug}">
			<src refid="project.sourcepath"/>
			<classpath refid="project.classpath"/>
		</javac>
	</target>

    <!-- print help -->
    <target name="help">
        <echo>
Options:
    -Dcompile.debug=true,false  Generate compiler debug info.
                                Default:true
Targets:
    checkout                    Checkout all source.
    checkout.ide                Checkout ide configuration files.
    clean                       Delete output.
    compile                     Compile source.
    javadoc                     Generate javadoc (html) documentation.
    process-resources           Process resources.
    release                     Create a release package.
    test                        Run tests.
    test-compile                Compile test source.
    test-process-resources      Process test resources.
Examples:
    First Run:
    ant checkout test           Will grab all source from cvs; process all
                                resources; compile all code and run all tests.

    Subsequent Runs:
    ant test                    Will process all resources; compile all code; run
                                all tests.
        </echo>
    </target>

    <!-- initialize output -->
	<target name="init">
        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.javadoc.dir}"/>
		<mkdir dir="${target.test-classes.dir}"/>
        <mkdir dir="${target.test-sessions.dir}"/>
	</target>

    <!-- document the source -->
    <target name="javadoc">
        <javadoc access="private" classpathref="project.classpath"
                destdir="${target.javadoc.dir}"
                doctitle="thinkParity Local Browser"
                group="Browser com.thinkparity.browser:com.thinkparity.browser.*,Model com.thinkparity.model:com.thinkparity.model.*,Migrator com.thinkparity.migrator,Codebase com.thinkparity.codebase:com.thinkparity.codebase.*"
                packagenames="com.thinkparity.*"
                sourcepathref="project.sourcepath"/>
    </target>

    <!-- process resources -->
    <target name="process-resources">
        <copy todir="${target.classes.dir}">
            <fileset dir="${basedir}/common/codebase/src/main/resources"/>
            <fileset dir="${basedir}/local/browser/src/main/resources"/>
            <fileset dir="${basedir}/local/model/src/main/resources"/>
        </copy>
        <copy todir="${target.classes.dir}" overwrite="true">
            <fileset dir="${basedir}/common/codebase/src/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="pom.version" value="${release.version}"/>
                <filtersfile file="${basedir}/build.filters"/>
                <filtersfile file="${basedir}/common/codebase/build.filters"/>
            </filterset>
        </copy>
        <copy todir="${target.classes.dir}" overwrite="true">
            <fileset dir="${basedir}/local/browser/src/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="pom.version" value="${release.version}"/>
                <filtersfile file="${basedir}/build.filters"/>
                <filtersfile file="${basedir}/local/browser/build.filters"/>
            </filterset>
        </copy>
        <copy todir="${target.classes.dir}" overwrite="true">
            <fileset dir="${basedir}/local/model/src/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="pom.version" value="${release.version}"/>
                <filtersfile file="${basedir}/build.filters"/>
                <filtersfile file="${basedir}/local/model/build.filters"/>
            </filterset>
        </copy>
    </target>

    <!-- release -->
    <target name="release">
        <!-- load the user's environment -->
        <property environment="env"/>
        <!-- configure launch4j location -->
        <property name="launch4j.install.dir" value="${env.ProgramFiles}\Launch4J"/>
        <!-- launch4j task definition -->
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
                classpath="${launch4j.install.dir}/launch4j.jar:${launch4j.install.dir}/lib/xstream.jar"/>

        <!-- / -->
        <mkdir dir="${target.release.dir}"/>
        <copy todir="${target.release.dir}">
            <fileset dir="${basedir}">
                <include name="README.txt"/>
                <include name="LICENSE.txt"/>
            </fileset>
            <fileset dir="${target.classes.dir}">
                <include name="thinkParity.properties"/>
            </fileset>
        </copy>
        <jar destfile="${target.release.dir}/thinkParity.jar"
                duplicate="fail" update="false" whenempty="fail">
            <manifest>
                <attribute name="Main-Class" value="com.thinkparity.ThinkParity"/> 
            </manifest>
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/*"/>
            </fileset>
        </jar>
        <launch4j>
            <config dontWrapJar="true" headerType="0"
                    jarPath="thinkParity.jar"
                    outfile="${target.release.dir}/thinkParity.exe"
                    errTitle="thinkParity - Error" customProcName="true"
                    stayAlive="false"
                    icon="${target.classes.dir}/images/ThinkParity32x32.ico">
                    <jre minVersion="1.5.0" args="-Dparity.install=&quot;%EXEDIR%&quot; -Dparity.serverhost=${release.serverhost} -Dparity.serverport=${release.serverport}"/>
            </config>
        </launch4j>
        <!-- ${release.image}/ -->
        <property name="target.release.image.dir" value="${target.release.dir}/${release.version}"/>
        <mkdir dir="${target.release.image.dir}"/>
        <copy todir="${target.release.image.dir}">
            <fileset dir="${target.classes.dir}">
                <include name="thinkParityImage.properties"/>   
             </fileset>   
        </copy>   
        <!-- ${release.image}/core/ -->
        <mkdir dir="${target.release.image.dir}/core"/>
        <jar destfile="${target.release.image.dir}/core/codebase.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/codebase/*/**"/>
            </fileset>
        </jar>
        <jar destfile="${target.release.image.dir}/core/migrator.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/migrator/*/**"/>
            </fileset>
        </jar>
        <jar destfile="${target.release.image.dir}/core/model.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/model/*/**"/>
            </fileset>
        </jar>
        <jar destfile="${target.release.image.dir}/core/browser.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/browser/*/**"/>
                <include name="fonts/*/**"/>
                <include name="images/*/**"/>   
            </fileset>
        </jar>
        <!-- ${release.image}/lib/ -->
        <mkdir dir="${target.release.image.dir}/lib"/>
        <copy todir="${target.release.image.dir}/lib">
            <fileset refid="project.runtimevendorlib"/>
            <mapper type="flatten"/>
        </copy>
        <!-- ${release.image}/lib/win32 -->
        <mkdir dir="${target.release.image.dir}/lib/win32"/>
        <copy todir="${target.release.image.dir}/lib/win32">
            <fileset refid="project.runtimevendorlibwin32"/>
            <mapper type="flatten"/>
        </copy>
    </target>

    <!-- unit test -->
	<target name="test" depends="test-compile">
		<junit fork="on" forkmode="once" reloading="false" errorproperty="junit.didError" failureproperty="junit.didFail">
			<classpath refid="project.classpath"/>
			<classpath refid="project.test-classpath"/>
			<formatter type="brief" usefile="false"/>
			<batchtest todir="${target.test-sessions.dir}">
                <formatter type="xml"/>
				<fileset dir="${target.test-classes.dir}" includes="**/*Test.class"/>
			</batchtest>
		</junit>

        <junitreport todir="${target.test-sessions.dir}">
            <fileset dir="${target.test-sessions.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${target.test-sessions.dir}"/>
        </junitreport>

        <fail message="JUnit failure." if="junit.didFail"/>
        <fail message="JUnit error." if="junit.didError"/>
	</target>

    <!-- compile tests -->
	<target name="test-compile" depends="compile,test-process-resources">
        <!-- if the compile.debug is not set; use true as a default otherwise
             use the value itself -->
        <condition property="compile.innerDebug" value="${compile.debug}" else="true">
            <isset property="compile.debug"/>
        </condition>
	
		<javac destdir="${target.test-classes.dir}" debug="${compile.innerDebug}">
			<src refid="project.test-sourcepath"/>
			<classpath refid="project.classpath"/>
			<classpath refid="project.test-classpath"/>
		</javac>
	</target>

    <!-- process test resources -->
    <target name="test-process-resources">
        <copy todir="${target.test-classes.dir}">
            <fileset dir="${basedir}/common/junitx/src/main/resources"/>

            <fileset dir="${basedir}/local/browser/src/test/resources"/>
            <fileset dir="${basedir}/local/model/src/test/resources"/>
        </copy>
    </target>
</project>
