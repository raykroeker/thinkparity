<?xml version="1.0"?>
<project name="desdemona" default="help" basedir=".">
    <property name="build.sysclasspath" value="ignore"/>

    <!-- build configuration -->
    <tstamp>
        <format property="build.id" pattern="yyyy-MM-dd HH:mm:ss Z" timezone="PST"/>
    </tstamp>

    <!-- release configuration -->
    <property name="release.name" value="${ant.project.name}"/>
    <property name="release.version" value="1.0.0-RC8"/>

    <!-- cvs configuration -->
    <property name="cvs.cvsroot" value=":pserver:tpdev.thinkparity.com:2401/home/cvs/repositories/thinkparity.com"/>
    <property name="cvs.modules" value="common/codebase common/junitx remote/codebase remote/model lib/junit lib/log4j lib/commons-codec lib/messenger"/>
    <property name="cvs.modules.ide" value="ide/eclipse/product/desdemona"/>
    <property name="cvs.branch" value="v1_0"/>

    <!-- output directories -->
	<property name="target.dir" value="${basedir}/target"/>
	<property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.javadoc.dir" value="${target.dir}/docs/api"/>
    <property name="target.release.dir" value="${target.dir}/release"/>
	<property name="target.test-classes.dir" value="${target.dir}/test-classes"/>
	<property name="target.test-report.dir" value="${target.dir}/test-report"/>
	<property name="target.test-sessions.dir" value="${target.dir}/test-sessions"/>

    <!-- input directories/files/paths -->
    <property name="vendor.dir" value="${basedir}/vendor"/>
    <property name="vendor.log4j.lib" value="${vendor.dir}/log4j/1.2.13/log4j.jar"/>
    <property name="vendor.commons-codec.lib" value="${vendor.dir}/commons-codec/1.3/commons-codec.jar"/>   

    <!-- classpath -->
    <path id="project.classpath">
		<pathelement location="${target.classes.dir}/common/codebase"/>
		<pathelement location="${target.classes.dir}/remote/codebase"/>
		<pathelement location="${target.classes.dir}/remote/model"/>

		<pathelement location="${basedir}/vendor/log4j/1.2.13/log4j.jar"/>
        <pathelement location="${basedir}/vendor/commons-codec/1.3/commons-codec.jar"/>
		<pathelement location="${basedir}/vendor/messenger/2.3.1/messenger.jar"/>
		<pathelement location="${basedir}/vendor/messenger/2.3.1/mail.jar"/>
    </path>

    <!-- test-classpath -->
    <path id="project.test-classpath">
        <path refid="project.classpath"/>

        <pathelement location="${target.test-classes.dir}/common/codebase"/>
        <pathelement location="${target.test-classes.dir}/common/junitx"/>
        <pathelement location="${target.test-classes.dir}/remote/model"/>

        <pathelement location="${basedir}/vendor/junit/3.8.1/junit.jar"/>
    </path>

    <!-- checkout -->
    <target name="checkout">
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.branch}"/>
        <echo message="${cvs.modules}"/>
        <echo message="${cvs.modules.ide}"/>
        <sleep seconds="3"/>
        <!-- source trees -->
        <cvs cvsroot="${cvs.cvsroot}"
            command="checkout" tag="${cvs.branch}" package="${cvs.modules}"
            dest="${basedir}"/>
        <!-- ide files -->
        <cvs cvsroot="${cvs.cvsroot}"
            command="export -d &quot;${basedir}/ide&quot;" tag="${cvs.branch}" package="${cvs.modules.ide}"
            dest="${basedir}"/>
        <move todir="${basedir}">
            <fileset dir="${basedir}/ide"/>
        </move>
    </target>

    <!-- update -->
    <target name="update">
        <echo message="${cvs.cvsroot}"/>
        <cvs cvsroot="${cvs.cvsroot}"
            command="update -P" tag="${cvs.branch}" package="${cvs.modules}"/>
    </target>

    <!-- delete output -->
	<target name="clean">
		<delete dir="${target.dir}"/>
	</target>

    <!-- compile -->
	<target name="compile" depends="init,process-resources">
        <!-- if the compile.debug is not set; use true as a default otherwise
             use the value itself -->
        <condition property="compile.innerDebug" value="${compile.debug}" else="true">
            <isset property="compile.debug"/>
        </condition>

        <!-- common/codebase -->
		<javac srcdir="common/codebase/src/main/java"
                destdir="${target.classes.dir}/common/codebase" debug="${compile.innerDebug}">
			<classpath refid="project.classpath"/>
		</javac>
        <!-- remote/codebase -->
		<javac srcdir="remote/codebase/src/main/java"
                destdir="${target.classes.dir}/remote/codebase" debug="${compile.innerDebug}">
			<classpath refid="project.classpath"/>
		</javac>
        <!-- remote/model -->
		<javac srcdir="remote/model/src/main/java"
                destdir="${target.classes.dir}/remote/model" debug="${compile.innerDebug}">
			<classpath refid="project.classpath"/>
		</javac>
	</target>

    <!-- print help -->
    <target name="help">
        <echo>
Options:
    -Dcompile.debug=true,false  Generate compiler debug info.
                                Default:true
Targets:
    checkout                    Checkout all source from ${cvs.branch}.
    clean                       Delete output.
    compile                     Compile source.
    javadoc                     Generate javadoc (html) documentation.
    process-resources           Process resources.
    release                     Create a release package.
    test                        Run tests.
    test-compile                Compile test source.
    test-process-resources      Process test resources.
    update                      Update sources from ${cvs.branch}.
Examples:
    First Run:
    ant checkout test           Will grab all source from cvs; process all
                                resources; compile all code and run all tests.

    Subsequent Runs:
    ant test                    Will process all resources; compile all code; run
                                all tests.

    Checkout IDE Files:
    ant checkout.ide
        </echo>
    </target>

    <!-- initialize output -->
	<target name="init">
        <!-- target/classes/* -->
        <mkdir dir="${target.classes.dir}/common/codebase"/>
        <mkdir dir="${target.classes.dir}/remote/codebase"/>
        <mkdir dir="${target.classes.dir}/remote/model"/>

        <mkdir dir="${target.test-classes.dir}/common/codebase"/>
        <mkdir dir="${target.test-classes.dir}/common/junitx"/>
        <mkdir dir="${target.test-classes.dir}/remote/model"/>

        <mkdir dir="${target.test-sessions.dir}"/>
	</target>

    <!-- document the source -->
    <target name="javadoc">
        <!-- common/codebase -->
        <javadoc access="private" classpathref="project.classpath"
                destdir="${target.javadoc.dir}/common/codebase"
                doctitle="thinkParity Common Codebase"
                packagenames="com.thinkparity.*"
                sourcepath="${basedir}/common/codebase/src/main/java"/>
        <!-- remote/codebase -->
        <javadoc access="private" classpathref="project.classpath"
                destdir="${target.javadoc.dir}/remote/codebase"
                doctitle="thinkParity Remote Codebase"
                packagenames="com.thinkparity.*"
                sourcepath="${basedir}/remote/codebase//src/main/java"/>
        <!-- remote/model -->
        <javadoc access="private" classpathref="project.classpath"
                destdir="${target.javadoc.dir}/remote/model"
                doctitle="thinkParity Remote Model"
                packagenames="com.thinkparity.*"
                sourcepath="${basedir}/remote/model/src/main/java"/>
    </target>

    <!-- process resources -->
    <target name="process-resources">
        <!-- common/codebase -->
        <copy todir="${target.classes.dir}/common/codebase">
            <fileset dir="${basedir}/common/codebase/src/main/resources"/>
        </copy>
        <!-- remote/model -->
        <copy todir="${target.classes.dir}/remote/model">
            <fileset dir="${basedir}/remote/model/src/main/resources"/>
        </copy>
        <copy todir="${target.classes.dir}/remote/model" overwrite="true">
            <fileset dir="${basedir}/remote/model/src/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="pom.version" value="${release.version}"/>
                <filter token="com.thinkparity.parity.buildId" value="${build.id}"/>
                <filtersfile file="${basedir}/build.filters"/>
            </filterset>
        </copy>
    </target>

    <!-- release -->
    <target name="release">
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="test" inheritAll="true" inheritRefs="true"/>
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile" inheritAll="true" inheritRefs="true"/>

        <property name="target.release.plugin.dir"
                value="${target.release.dir}/plugin"/>
        <!-- ${target.release.plugin.dir} -->
        <copy todir="${target.release.plugin.dir}">
            <fileset dir="${basedir}">
                <include name="README.txt"/>
                <include name="LICENSE.txt"/>
            </fileset>
            <fileset dir="${target.classes.dir}/remote/model">
                <include name="changelog.html"/>
                <include name="icon_large.gif"/>
                <include name="icon_small.gif"/>
                <include name="plugin.xml"/>
                <include name="readme.html"/>
            </fileset>
        </copy>
        <!-- ${target.release.plugin.dir}/classes -->
        <copy todir="${target.release.plugin.dir}/classes">
            <fileset dir="${target.classes.dir}/remote/model">
                <include name="log4j.properties"/>
                <include name="localization/*"/>
            </fileset>
        </copy>
        <!-- ${target.release.plugin.dir}/lib -->
        <mkdir dir="${target.release.plugin.dir}/lib"/>
        <copy todir="${target.release.plugin.dir}/lib">
            <fileset file="${vendor.log4j.lib}"/>
            <fileset file="${vendor.commons-codec.lib}"/>
        </copy>
        <!-- remote/model -->
        <jar destfile="${target.release.plugin.dir}/lib/model.jar">
            <manifest>
            </manifest>
            <fileset dir="${target.classes.dir}/remote/model"/>
        </jar>
        <!-- common/codebase -->
        <!-- remote/codebase -->
        <jar destfile="${target.release.plugin.dir}/lib/codebase.jar">
            <manifest>
            </manifest>
            <fileset dir="${target.classes.dir}/common/codebase"/>
            <fileset dir="${target.classes.dir}/remote/codebase"/>
        </jar>
        <!-- release jar -->
        <jar destfile="${target.release.dir}/${release.name}-${release.version}-plugin.jar">
            <manifest>
            </manifest>
            <fileset dir="${target.release.plugin.dir}"/>
        </jar>
        <checksum file="${target.release.dir}/${release.name}-${release.version}-plugin.jar"
            algorithm="MD5"/>
        <checksum file="${target.release.dir}/${release.name}-${release.version}-plugin.jar"
            algorithm="SHA"/>
    </target>

    <!-- unit test -->
	<target name="test" depends="test-compile">
		<junit fork="on" forkmode="once" reloading="false"
		errorproperty="junit.didError" failureproperty="junit.didFail">
			<classpath refid="project.test-classpath"/>
			<formatter type="brief" usefile="false"/>

            <!-- execute single test -->
		    <test if="test" name="${test}" todir="${target.test-sessions.dir}">
		        <formatter type="xml"/>
		    </test>

		    <!-- execute batch tests -->
		    <batchtest unless="test" todir="${target.test-sessions.dir}">
                <formatter type="xml"/>
                <fileset dir="${target.test-classes.dir}/common/codebase" includes="**/*Test.class"/>
                <fileset dir="${target.test-classes.dir}/remote/model" includes="**/*Test.class"/>
			</batchtest>
		</junit>
        <antcall target="test-report" inheritRefs="true" inheritAll="true"/>

        <fail message="JUnit failure." if="junit.didFail"/>
        <fail message="JUnit error." if="junit.didError"/>
	</target>

    <!-- unit test report -->
    <target name="test-report">
        <delete dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <junitreport todir="${target.test-report.dir}">
            <fileset dir="${target.test-sessions.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report styledir="${basedir}" format="noframes" todir="${target.test-report.dir}"/>
        </junitreport>
    </target>

    <!-- compile tests -->
	<target name="test-compile" depends="compile,test-process-resources">
        <!-- if the compile.debug is not set; use true as a default otherwise
             use the value itself -->
        <condition property="compile.innerDebug" value="${compile.debug}" else="true">
            <isset property="compile.debug"/>
        </condition>

        <!-- common/junitx -->
        <javac srcdir="common/junitx/src/main/java"
                destdir="${target.test-classes.dir}/common/junitx" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
        <!-- common/codebase -->
        <javac srcdir="common/codebase/src/test/java"
                destdir="${target.test-classes.dir}/common/codebase" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
        <!-- remote/model -->
        <javac srcdir="remote/model/src/test/java"
                destdir="${target.test-classes.dir}/remote/model" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
	</target>

    <!-- process test resources -->
    <target name="test-process-resources">
        <copy todir="${target.test-classes.dir}/common/junitx/">
            <fileset dir="${basedir}/common/junitx/src/main/resources"/>
        </copy>
    </target>
</project>
