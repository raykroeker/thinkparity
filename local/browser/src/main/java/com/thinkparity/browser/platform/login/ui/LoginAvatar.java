/*
 * LoginAvatar.java
 *
 * March 16, 2006, 8:14 PM
 */
package com.thinkparity.browser.platform.login.ui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.SwingUtilities;

import com.thinkparity.browser.application.browser.component.ButtonFactory;
import com.thinkparity.browser.application.browser.component.CheckBoxFactory;
import com.thinkparity.browser.application.browser.component.LabelFactory;
import com.thinkparity.browser.application.browser.component.TextFactory;
import com.thinkparity.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.State;
import com.thinkparity.browser.platform.util.SwingUtil;

/**
 * The avatar displayed on the login window.
 *
 * @author raykroeker@gmail.com
 * @version 1.1
 */
public class LoginAvatar extends Avatar {

	/**
	 * @see java.io.Serializable
	 * 
	 */
	private static final long serialVersionUID = 1;

	/**
	 * Creates new form LoginAvatar
	 * 
	 */
	public LoginAvatar() {
		super("LoginAvatar", Color.WHITE);
		initComponents();
	}

	/**
	 * @see com.thinkparity.browser.javax.swing.AbstractJPanel#isInputValid()
	 * 
	 */
	public Boolean isInputValid() {
		final String username = extractUsername();
		if(null == username || 1 > username.length()) { return Boolean.FALSE; }

		final String password = extractPassword();
		if(null == password || 1 > password.length()) { return Boolean.FALSE; }

		if(errors.size() > 0) { return Boolean.FALSE; }

		return Boolean.TRUE;
	}

	public Boolean extractSavePassword() {
		return SwingUtil.extract(savePasswordJCheckBox);
	}

	public String extractPassword() {
		return SwingUtil.extract(passwordJPasswordField);
	}

	public String extractUsername() {
		return SwingUtil.extract(usernameJTextField);
	}

	public AvatarId getId() {
		return AvatarId.PLATFORM_LOGIN;
	}

	public State getState() { return null; }

	public void setState(final State state) {}

	/**
	 * Reload the avatar. This event is called when either the content provider
	 * or the input has changed; or as a manual reload of the avatar.
	 */
	public void reload() {
		if(getPreferences().isSetUsername()) {
			usernameJTextField.setText(getPreferences().getUsername());
			usernameJTextField.setEnabled(false);
		}
		else { usernameJTextField.setEnabled(true); }
		if(containsErrors()) {
			infoJLabel.setText(extractErrorMessage());
			clearErrors();
		}
	}

	/**
	 * Extract an error message from the list of errors.
	 * 
	 * @return A localized error message.
	 */
	private String extractErrorMessage() {
		final StringBuffer buffer = new StringBuffer();
		for(final Throwable t : getErrors()) {
			buffer.append(getString(t.getMessage()));
		}
		return buffer.toString();
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JButton cancelJButton;
        javax.swing.JButton loginJButton;
        javax.swing.JLabel passwordJLabel;
        javax.swing.JLabel usernameJLabel;

        usernameJLabel = LabelFactory.create(getString("UsernameLabel"));
        usernameJTextField = TextFactory.create();
        passwordJLabel = LabelFactory.create(getString("PasswordLabel"));
        passwordJPasswordField = TextFactory.createPassword();
        savePasswordJCheckBox = CheckBoxFactory.create(getString("SavePasswordCheckBox"));
        loginJButton = ButtonFactory.create(getString("LoginButton"));
        cancelJButton = ButtonFactory.create(getString("CancelButton"));
        infoJLabel = LabelFactory.create();

        passwordJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                passwordJLabelMouseClicked(e);
            }
        });

        passwordJPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                passwordJPasswordFieldActionPerformed(e);
            }
        });

        savePasswordJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        savePasswordJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        savePasswordJCheckBox.setOpaque(false);

        loginJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                loginJButtonActionPerformed(e);
            }
        });

        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                cancelJButtonActionPerformed(e);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(usernameJLabel)
                            .add(passwordJLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(savePasswordJCheckBox)
                            .add(passwordJPasswordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .add(usernameJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(cancelJButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(loginJButton))
                    .add(infoJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(usernameJLabel)
                    .add(usernameJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(passwordJLabel)
                    .add(passwordJPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(savePasswordJCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(infoJLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(loginJButton)
                    .add(cancelJButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void passwordJLabelMouseClicked(java.awt.event.MouseEvent e) {//GEN-FIRST:event_passwordJLabelMouseClicked
    	if(2 == e.getClickCount()) {
    		if(e.isShiftDown()) { showConnectionInfo(); }
    	}
    }//GEN-LAST:event_passwordJLabelMouseClicked

	private void passwordJPasswordFieldActionPerformed(java.awt.event.ActionEvent e) {//GEN-FIRST:event_passwordJPasswordFieldActionPerformed
	    loginJButtonActionPerformed(e);
	}//GEN-LAST:event_passwordJPasswordFieldActionPerformed

	private void cancelJButtonActionPerformed(java.awt.event.ActionEvent e) {//GEN-FIRST:event_cancelJButtonActionPerformed
	    passwordJPasswordField.setText("");
		SwingUtilities.getWindowAncestor(this).dispose();
	}//GEN-LAST:event_cancelJButtonActionPerformed

	private void loginJButtonActionPerformed(java.awt.event.ActionEvent e) {//GEN-FIRST:event_loginJButtonActionPerformed
	    if(isInputValid()) { SwingUtilities.getWindowAncestor(this).dispose(); }
	}//GEN-LAST:event_loginJButtonActionPerformed

	private void hideConnectionInfo() { infoJLabel.setText(""); }

	private void showConnectionInfo() {
		final StringBuffer buffer =
			new StringBuffer(getPreferences().getServerHost())
			.append(":")
			.append(getPreferences().getServerPort());
		infoJLabel.setText(buffer.toString());
		final javax.swing.Timer timer = new javax.swing.Timer(3 * 1000, new ActionListener() {
			public void actionPerformed(final ActionEvent e) {
				hideConnectionInfo();
			}
		});
		timer.setRepeats(false);
		timer.start();
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel infoJLabel;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JCheckBox savePasswordJCheckBox;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
