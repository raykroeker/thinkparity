/*
 * Created On: July 31, 2006, 5:27 PM
 */
package com.thinkparity.browser.application.browser.display.avatar;

import com.thinkparity.codebase.assertion.Assert;

import com.thinkparity.browser.Constants.Icons;

/**
 * <b>Title:</b>thinkParity Main Title Tabs<br>
 * <b>Description:</b>The tabs in the title portion of the UI are a simple
 * panel with two images controlling the contexts.<br>
 * 
 * @author raymond@thinkparity.com
 * @version 1.1.2.1
 */
public class MainTitleAvatarTabPanel extends MainTitleAvatarAbstractPanel {

    /** @see java.io.Serializable */
    private static final long serialVersionUID = 1;

    /** The tab. */
    private MainTitleAvatar.Tab tab;

    /** Creates new form BrowserTitleTabs */
    public MainTitleAvatarTabPanel() {
        super("BrowserTitleTabs");
        initComponents();
    }

    /**
     * Obtain the selected tab.
     * 
     * @return the selected tab.
     */
    MainTitleAvatar.Tab getTab() {
        return tab;
    }

    /**
     * Select a tab.
     * 
     * @param tab
     *            A tab.
     */
    void setTab(final MainTitleAvatar.Tab tab) {
        this.tab = tab;
        reloadDisplay();
    }

    private void contactsJLabelMouseClicked(java.awt.event.MouseEvent e) {//GEN-FIRST:event_contactsJLabelMouseClicked
        setTab(MainTitleAvatar.Tab.CONTACT);
    }//GEN-LAST:event_contactsJLabelMouseClicked

    private void containersJLabelMouseClicked(java.awt.event.MouseEvent e) {//GEN-FIRST:event_containersJLabelMouseClicked
        setTab(MainTitleAvatar.Tab.CONTAINER);
    }//GEN-LAST:event_containersJLabelMouseClicked

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        containersJLabel = new javax.swing.JLabel();
        contactsJLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setOpaque(false);
        containersJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BrowserTitle_ContainersTabSelected.png")));
        containersJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                containersJLabelMouseClicked(e);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        add(containersJLabel, gridBagConstraints);

        contactsJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BrowserTitle_ContactsTab.png")));
        contactsJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                contactsJLabelMouseClicked(e);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        add(contactsJLabel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reload the display.  This will examine the current tab; then call the
     * controller to display the correct avatar; as well as update the images
     * representing the tabs.
     *
     */
    private void reloadDisplay() {
        switch(tab) {
        case CONTACT:
            contactsJLabel.setIcon(Icons.BrowserTitle.CONTACTS_TAB_SELECTED);
            containersJLabel.setIcon(Icons.BrowserTitle.CONTAINERS_TAB);
            mainTitleAvatar.getController().displayTabContactAvatar();
            break;
        case CONTAINER:
            contactsJLabel.setIcon(Icons.BrowserTitle.CONTACTS_TAB);
            containersJLabel.setIcon(Icons.BrowserTitle.CONTAINERS_TAB_SELECTED);
            mainTitleAvatar.getController().displayTabContainerAvatar();
            break;
        default:
            Assert.assertUnreachable("UNKNOWN TAB");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel contactsJLabel;
    private javax.swing.JLabel containersJLabel;
    // End of variables declaration//GEN-END:variables
}
