/*
 * ConfirmSynchronizeAvatar.java
 *
 * Created on April 6, 2007, 5:30 PM
 */

package com.thinkparity.ophelia.browser.platform.firstrun;

import java.awt.Graphics;
import java.awt.event.ActionEvent;

import javax.swing.AbstractAction;

import com.thinkparity.codebase.assertion.Assert;

import com.thinkparity.ophelia.browser.Constants.Images;
import com.thinkparity.ophelia.browser.application.browser.BrowserConstants;
import com.thinkparity.ophelia.browser.application.browser.BrowserConstants.Fonts;
import com.thinkparity.ophelia.browser.application.browser.component.ButtonFactory;
import com.thinkparity.ophelia.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.ophelia.browser.platform.util.State;

/**
 *
 * @author  user
 */
public class ConfirmSynchronizeAvatar extends Avatar {

    /** The account type. */
    private AccountType accountType = AccountType.STANDARD;

    /** Whether or not the user confirmed. */
    private Boolean didConfirm;

    /** Creates new form ConfirmSynchronizeAvatar */
    public ConfirmSynchronizeAvatar() {
        super("ConfirmSynchronizeAvatar", BrowserConstants.DIALOGUE_BACKGROUND);
        initComponents();
        bindEscapeKey("Cancel", new AbstractAction() {
            private static final long serialVersionUID = 1;
            public void actionPerformed(final ActionEvent e) {
                denyJButtonActionPerformed(e);
            }
        });
    }

    /**
     * Determine if the user confirmed or not.
     * 
     * @return true if the user confirmed, false otherwise.
     */
    public Boolean didConfirm() {
        return didConfirm;
    }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#getId()
     * 
     */
    public AvatarId getId() {
        return AvatarId.DIALOG_PLATFORM_CONFIRM_SYNCHRONIZE;
    }

    /** @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#getState() */
    public State getState() {
        throw Assert.createNotYetImplemented("ConfirmSynchronizeAvatar#getState");
    }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#paintComponent(java.awt.Graphics)
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // These images help to make the rounded corners look good.
        // Note that top left and top right are drawn by the window title.
        g.drawImage(Images.BrowserTitle.DIALOG_BOTTOM_LEFT,
                0,
                getSize().height - Images.BrowserTitle.DIALOG_BOTTOM_LEFT.getHeight(),
                Images.BrowserTitle.DIALOG_BOTTOM_LEFT.getWidth(),
                Images.BrowserTitle.DIALOG_BOTTOM_LEFT.getHeight(), this);
        g.drawImage(Images.BrowserTitle.DIALOG_BOTTOM_RIGHT,
                getSize().width - Images.BrowserTitle.DIALOG_BOTTOM_RIGHT.getWidth(),
                getSize().height - Images.BrowserTitle.DIALOG_BOTTOM_RIGHT.getHeight(),
                Images.BrowserTitle.DIALOG_BOTTOM_RIGHT.getWidth(),
                Images.BrowserTitle.DIALOG_BOTTOM_RIGHT.getHeight(), this);
    }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#reload()
     */
    @Override
    public void reload() {
        reloadMessage();
    }

    /**
     * Set the account type.
     *
     */
    public void setAccountType(final AccountType accountType) {
        this.accountType = accountType;
        reload();
    }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#setState(com.thinkparity.ophelia.browser.platform.util.State)
     * 
     */
    public void setState(final State state) {
        throw Assert.createNotYetImplemented("ConfirmSynchronizeAvatar#setState");
    }

    private void confirmJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmJButtonActionPerformed
        didConfirm = Boolean.TRUE;
        disposeWindow();
    }//GEN-LAST:event_confirmJButtonActionPerformed

    private void denyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyJButtonActionPerformed
        didConfirm = Boolean.FALSE;
        disposeWindow();
    }//GEN-LAST:event_denyJButtonActionPerformed

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        final javax.swing.JButton confirmJButton = ButtonFactory.create();
        final javax.swing.JButton denyJButton = ButtonFactory.create();

        messageJLabel.setFont(Fonts.DialogFont);
        messageJLabel.setText(java.util.ResourceBundle.getBundle("localization/JPanel_Messages").getString("ConfirmSynchronizeAvatar.messageStandardJLabel"));
        messageJLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        confirmJButton.setFont(Fonts.DialogButtonFont);
        confirmJButton.setText(java.util.ResourceBundle.getBundle("localization/JPanel_Messages").getString("ConfirmSynchronizeAvatar.ConfirmButton"));
        confirmJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmJButtonActionPerformed(evt);
            }
        });

        denyJButton.setFont(Fonts.DialogButtonFont);
        denyJButton.setText(java.util.ResourceBundle.getBundle("localization/JPanel_Messages").getString("ConfirmSynchronizeAvatar.DenyButton"));
        denyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(messageJLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(denyJButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {confirmJButton, denyJButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(denyJButton)
                    .addComponent(confirmJButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reload the message.
     */
    private void reloadMessage() {
        switch (accountType) {
        case PREMIUM:
            messageJLabel.setText(getString("messagePremiumJLabel"));
            break;
        case STANDARD:
            messageJLabel.setText(getString("messageStandardJLabel"));
            break;
        default:
            Assert.assertUnreachable("Unknown account type id");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JLabel messageJLabel = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables
    
    public enum AccountType { PREMIUM, STANDARD }
}
