/*
 * StatusAvatar.java
 *
 * Created on May 8, 2007, 1:15 PM
 */

package com.thinkparity.ophelia.browser.application.browser.display.avatar.dialog;

import java.awt.event.ActionEvent;
import java.text.MessageFormat;

import javax.swing.AbstractAction;

import com.thinkparity.ophelia.browser.application.browser.BrowserConstants;
import com.thinkparity.ophelia.browser.application.browser.BrowserConstants.Fonts;
import com.thinkparity.ophelia.browser.application.browser.component.ButtonFactory;
import com.thinkparity.ophelia.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.ophelia.browser.platform.action.Data;
import com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.ophelia.browser.platform.util.State;

/**
 *
 * @author  user
 */
public class StatusAvatar extends Avatar {

    /** @see java.io.Serializable */
    private static final long serialVersionUID = 1;

    /** Creates new form StatusAvatar */
    public StatusAvatar() {
        super("StatusAvatar", BrowserConstants.DIALOGUE_BACKGROUND);
        bindEscapeKey("Cancel", new AbstractAction() {
            public void actionPerformed(final ActionEvent e) {
                disposeWindow();
            }
        });
        initComponents();
    }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#getAvatarTitle()
     */
    @Override
    public String getAvatarTitle() {
        if (null == input) {
            return null;
        } else if (null == getInputStatusMessageKey()) {
            return getString("Title");
        } else {
            final StringBuffer statusKey = new StringBuffer(getInputStatusMessageKey()).append(".Title");
            return getString(statusKey.toString());
        }
    }

    public AvatarId getId() { return AvatarId.DIALOG_STATUS; }

    public State getState() { return null; }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#reload()
     * 
     */
    public void reload() {
        reloadStatusMessage();
    }

    public void setState(final State state) {}

    private void closeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJButtonActionPerformed
        disposeWindow();
    }//GEN-LAST:event_closeJButtonActionPerformed

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        final javax.swing.JButton closeJButton = ButtonFactory.create();

        statusMessageJLabel.setFont(Fonts.DialogFont);
        statusMessageJLabel.setText("Status.");
        statusMessageJLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        closeJButton.setFont(Fonts.DialogButtonFont);
        closeJButton.setText(java.util.ResourceBundle.getBundle("localization/Browser_Messages").getString("StatusAvatar.Ok"));
        closeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusMessageJLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(closeJButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(statusMessageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(closeJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JLabel statusMessageJLabel = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables

    /**
     * Get the status message arguments.
     * 
     * @return Status message arguments <code>Object[]</code>.
     */
    private Object[] getInputStatusMessageArguments() {
        if (null == input) {
            return null;
        } else {
            return (Object[]) ((Data) input).get(DataKey.STATUS_MESSAGE_ARGUMENTS);
        }
    }

    /**
     * Get the status message key from the input.
     * 
     * @return A status message key <code>String</code>.
     */
    private String getInputStatusMessageKey() {
        if (null == input) {
            return null;
        } else {
            return (String) ((Data) input).get(DataKey.STATUS_MESSAGE_KEY);
        }
    }

    /**
     * Reload the status message label.
     */
    private void reloadStatusMessage() {
        statusMessageJLabel.setText("");
        final String statusMessageKey = getInputStatusMessageKey();
        final Object[] statusMessageArguments = getInputStatusMessageArguments();
        final String text;
        if (null != statusMessageArguments) {
            text = getString(statusMessageKey, statusMessageArguments);
        } else {
            text = getString(statusMessageKey);
        }
        statusMessageJLabel.setText(MessageFormat.format("<html>{0}</html>", text));
    }

    /** Data keys. */
    public enum DataKey { STATUS_MESSAGE_ARGUMENTS, STATUS_MESSAGE_KEY }
}
