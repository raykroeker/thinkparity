/*
 * PublishContainerAvatarUserCellRenderer.java
 *
 * Created on December 9, 2006, 4:19 PM
 */

package com.thinkparity.ophelia.browser.application.browser.display.renderer.dialog.container;

import java.awt.Component;
import java.awt.Insets;

import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;

import com.thinkparity.codebase.swing.AbstractJPanel;
import com.thinkparity.codebase.swing.border.TopBorder;

import com.thinkparity.ophelia.browser.Constants.Colors;
import com.thinkparity.ophelia.browser.application.browser.display.avatar.dialog.container.PublishContainerAvatar.PublishContainerAvatarUser;

/**
 *
 * @author  Administrator
 */
public class PublishContainerAvatarUserCellRenderer extends AbstractJPanel implements ListCellRenderer {

    /** Creates new form PublishContainerAvatarUserCellRenderer */
    public PublishContainerAvatarUserCellRenderer() {
        initComponents();
    }
    
    /**
     * Return a component that has been configured to display the specified
     * value. That component's <code>paint</code> method is then called to
     * "render" the cell.  If it is necessary to compute the dimensions
     * of a list because the list cells do not have a fixed size, this method
     * is called to generate a component on which <code>getPreferredSize</code>
     * can be invoked.
     * 
     * @param list The JList we're painting.
     * @param value The value returned by list.getModel().getElementAt(index).
     * @param index The cells index.
     * @param isSelected True if the specified cell was selected.
     * @param cellHasFocus True if the specified cell has the focus.
     * @return A component whose paint() method will render the specified value.
     * @see JList
     * @see ListSelectionModel
     * @see ListModel
     */
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        final PublishContainerAvatarUser user = (PublishContainerAvatarUser) value;
        userJCheckBox.setText(user.getExtendedName());
        userJCheckBox.setSelected(user.isSelected());
        if (user.isFirstContact()) {
            final Insets insets = new Insets(0, 20, 0, 0);
            setBorder(new TopBorder(Colors.Browser.Publish.FIRST_CONTACT_BORDER, insets));
        } else {
            setBorder(null);
        }
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        userJCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(50, 18));
        userJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        userJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        userJCheckBox.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(userJCheckBox, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox userJCheckBox;
    // End of variables declaration//GEN-END:variables

}
