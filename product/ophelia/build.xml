<?xml version="1.0"?>
<project name="OpheliaProduct" default="help" basedir="."
        xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
        xmlns:antx="antlib:com.thinkparity.antx">
    <property name="build.sysclasspath" value="ignore"/>

    <!-- build configuration -->
    <property environment="env"/>
    <tstamp>
        <format property="thinkparity.build-id" pattern="yyyyMMddHHmmssZ" timezone="PST"/>
    </tstamp>
    <property name="javac.compilerargs" value="-Xlint:deprecation -Xlint:unchecked"/>
    <property name="javac.debug" value="true"/>
    <property name="javac.debug-level" value="lines,vars,source"/>
    <property name="java.jvmarg-debug" value="-Xdebug -Xint -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"/>

    <!-- local configuration  -->
    <property name="localconfig" value="local.properties"/>
    <property file="${localconfig}"/>
    <fail>
        <condition>
            <not>
                <contains string="${ant.version}" substring="1.7.0"/>
            </not>
        </condition>
Please install version 1.7.0 of ant.
http://ant.apache.org
    </fail>
    <fail>
        <condition>
            <not>
                <available file="${localconfig}"/>
            </not>
        </condition>
Local configuration ${localconfig} does not exist.  Please create:
    scm.credentials             Source control credentials.     username:password
    thinkparity.environment     Environment                     com.thinkparity.codebase.model.session.Environment
    thinkparity.mode            Mode                            com.thinkparity.codebase.Mode
    thinkparity.os              Operating System                com.thinkparity.codebase.OS
    thinkparity.os-platform     Operating System Platform       com.thinkparity.codebase.Platform
    thinkparity.product-name    Product Name
    thinkparity.release-name    Release Name
    </fail>
    <fail>
        <condition>
            <not>
                <and>
                    <isset property="scm.credentials"/>
                    <isset property="thinkparity.environment"/>
                    <isset property="thinkparity.os"/>
                    <isset property="thinkparity.os-platform"/>
                    <isset property="thinkparity.product-name"/>
                    <isset property="thinkparity.release-name"/>
                </and>
            </not>
        </condition>
Local configuration ${localconfig} is incomplete.  Please specify:
    scm.credentials             XXXXXXXXXXXXXXXXXXXXXXXXXX
    thinkparity.environment     ${thinkparity.environment}
    thinkparity.mode            ${thinkparity.mode}
    thinkparity.os              ${thinkparity.os}
    thinkparity.os-platform     ${thinkparity.os-platform}
    thinkparity.product-name    ${thinkparity.product-name}
    thinkparity.release-name    ${thinkparity.release-name}
    </fail>
    <echo>
Environment Configuration:
    Groovy Home:                ${env.GROOVY_HOME}
    Launch4J Home:              ${env.LAUNCH4J_HOME}
    NSIS Home:                  ${env.NSIS_HOME}
    Java Home:                  ${env.JAVA_HOME}
Build Configuration:
    Build Id:                   ${thinkparity.build-id}
    Compiler Arguments:         ${javac.compilerargs}
    Compiler Debugging:         ${javac.debug} ${javac.debug-level}
    Java JVM Debug:             ${java.jvmarg-debug}
Local Configuration:            ${localconfig}
    Source Control Credentials: XXXXXXXXXXXXXXXXXXXXXXXXXX
    Environment:                ${thinkparity.environment}
    Mode:                       ${thinkparity.mode}
    Operating System:           ${thinkparity.os}
    Operating System Platform:  ${thinkparity.os-platform}
    Product Name:               ${thinkparity.product-name}
    Release Name:               ${thinkparity.release-name}
    </echo>

    <!-- cvs configuration -->
    <property name="cvs.compressionlevel" value="9"/>
    <property name="cvs.cvsroot" value=":pserver:${scm.credentials}@tpdev.thinkparity.com:2401/home/cvs/repositories/thinkparity.com"/>
    <property name="cvs.branch" value="v1_0"/>
    <property name="cvs.modules" value="local/browser local/model local/thinkparity"/>

    <!-- groovy configuration -->
    <path id="groovy.classpath">
        <pathelement location="${env.GROOVY_HOME}/lib/groovy-1.0.jar"/>
        <pathelement location="${env.GROOVY_HOME}/lib/antlr-2.7.5.jar"/>
        <pathelement location="${env.GROOVY_HOME}/lib/asm-2.2.jar"/>
        <pathelement location="${basedir}/local/browser/src/main/groovy"/>
        <path refid="runtime.classpath"/>
    </path>

    <!-- launch4j configuration -->
    <path id="launch4j.classpath">
        <pathelement location="${env.LAUNCH4J_HOME}/launch4j.jar"/>
        <pathelement location="${env.LAUNCH4J_HOME}/lib/xstream.jar"/>
    </path>

    <!-- input directories -->
    <property name="thinkparity.common.home" value="${basedir}/../common"/>

    <!-- output directories -->
    <property name="target.dir" value="${basedir}/target"/>
    <property name="target.analyze-report.dir" value="${basedir}/target/analyze-report"/>   
    <property name="target.package.dir" value="${target.dir}/package"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.javadoc.dir" value="${target.dir}/docs/api"/>
    <property name="target.test-javadoc.dir" value="${target.dir}/test-docs/api"/>
    <property name="target.test-classes.dir" value="${target.dir}/test-classes"/>
    <property name="target.test-report.dir" value="${target.dir}/test-report"/>
    <property name="target.test-sessions.dir" value="${target.dir}/test-sessions"/>

    <!-- compile dependencies -->
    <antx:dependency type="java" scope="compile" provider="apache.org" version="1.3"
        path="commons-codec/1.3/commons-codec.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org" version="1.2.13"
        path="log4j/1.2.13/log4j.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org" version="0.20.5"
        path="fop/0.20.5/avalon-framework-cvs-20020806.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org" version="0.20.5"
        path="fop/0.20.5/fop.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org" version="1.9.1"
        path="lucene/1.9.1/lucene.jar"/>
    <antx:dependency type="java" scope="compile" provider="codehaus.org" version="1.0"
        path="groovy/1.0/groovy.jar"/>
    <antx:dependency type="java" scope="compile" provider="codehaus.org" version="1.2.1"
        path="xstream/1.2.1/xstream.jar"/>
    <antx:dependency type="java" scope="compile" provider="dom4j.org" version="1.6.1"
        path="dom4j/1.6.1/dom4j.jar"/>
    <antx:dependency type="java" scope="compile" provider="java.net" version="0.9.1"
        path="jdic/0.9.1/${thinkparity.os-platform}/jdic.jar"/>
    <antx:dependency type="java" scope="compile" provider="java.net" version="1.0"
        path="swing-layout/1.0/swing-layout.jar"/>
    <antx:dependency type="java" scope="compile" provider="jivesoftware.org" version="2.2.1"
        path="smack/2.2.1/smack.jar"/>
    <antx:dependency type="java" scope="compile" provider="l2fprod.com" version="6.7"
        path="nativeskin/6.7/nativeskin.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/jta-spec1_0_1.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/jotm.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/xapool.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/ow_carol.jar"/>

    <!-- runtime dependencies -->
    <antx:dependency type="java" scope="runtime" provider="apache.org" version="10.2.2.0"
        path="apache.org/derby/10.2.2.0/derby.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org" version="0.20.5"
        path="fop/0.20.5/batik.jar"/>
    <antx:dependency type="java" scope="runtime" provider="jivesoftware.org" version="2.0.10"
        path="smackx/2.2.1/smackx.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/jotm_jrmp_stubs.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/commons-logging.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/connector-1_5.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/howl.jar"/>
    <!-- runtime native dependencies -->
    <antx:dependency type="native" scope="runtime" provider="l2fprod.com" version="6.7"
        path="i686/${thinkparity.os-platform}/nativeskin/6.7"/>
    <antx:dependency type="native" scope="runtime" provider="java.net" version="0.9.1"
        path="i686/${thinkparity.os-platform}/jdic/0.9.1"/>

    <!-- test dependencies -->
    <antx:dependency type="java" scope="test" provider="junit.org" version="3.8.1"
        path="junit/3.8.1/junit.jar"/>

    <!-- checkout -->
    <target name="checkout">
        <echo message="${cvs.compressionlevel}"/>
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.branch}"/>
        <echo message="${cvs.modules}"/>
        <sleep seconds="3"/>
        <!-- source trees -->
        <cvs cvsroot="${cvs.cvsroot}"
            command="checkout" compressionlevel="${cvs.compressionlevel}"
            tag="${cvs.branch}" package="${cvs.modules}" dest="${basedir}"/>
    </target>

    <!-- delete output -->
    <target name="clean">
        <delete dir="${target.dir}"/>
    </target>

    <!-- compile -->
    <target name="compile" depends="init,process-resources">
        <!-- common/codebase -->
        <javac srcdir="${thinkparity.common.home}/codebase/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- commmon/model -->
        <javac srcdir="${thinkparity.common.home}/model/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- local/thinkparity -->
        <javac srcdir="local/thinkparity/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- local/model -->
        <javac srcdir="local/model/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- local/browser -->
        <javac srcdir="local/browser/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
    </target>

    <!-- run -->
    <target name="run" depends="compile">
        <pathconvert property="runtime.librarypath" refid="runtime.librarypath"/>
        <java classname="com.thinkparity.ophelia.browser.Browser" fork="true">
            <classpath refid="runtime.classpath"/>
            <jvmarg line="-Djava.library.path=&quot;${runtime.librarypath}&quot; -Dthinkparity-dir=&quot;${target.classes.dir}&quot; -Dthinkparity.mode=${thinkparity.mode} -Dthinkparity.environment=${thinkparity.environment}"/>
        </java>
    </target>

    <!-- debug -->
    <target name="debug" depends="compile">
        <pathconvert property="runtime.librarypath" refid="runtime.librarypath"/>
        <java classname="com.thinkparity.ophelia.browser.Browser" fork="true">
            <classpath refid="runtime.classpath"/>
            <jvmarg line="${java.jvmarg-debug} -Djava.library.path=&quot;${runtime.librarypath}&quot; -Dthinkparity-dir=&quot;${target.classes.dir}&quot; -Dthinkparity.mode=${thinkparity.mode} -Dthinkparity.environment=${thinkparity.environment}"/>
        </java>
    </target>

    <!-- run package -->
    <target name="run-package" depends="package">
        <java jar="${target.package.dir}/thinkParity.jar"
                dir="${target.package.dir}" fork="true">
            <jvmarg line="-Dthinkparity-dir=&quot;${target.package.dir}&quot; -Dthinkparity.mode=DEVELOPMENT -Dthinkparity.environment=${thinkparity.environment}"/>
        </java>
    </target>

    <!-- debug package -->
    <target name="debug-package" depends="package">
        <java jar="${target.package.dir}/thinkParity.jar"
                dir="${target.package.dir}" fork="true">
            <jvmarg line="${java.jvmarg-debug} -Dthinkparity-dir=&quot;${target.package.dir}&quot; -Dthinkparity.mode=DEVELOPMENT -Dthinkparity.environment=${thinkparity.environment}"/>
        </java>
    </target>

    <!-- help -->
    <target name="help">
        <echo>
Build Configuration:
    Build Id:                   ${thinkparity.build-id}
    Compiler Arguments:         ${javac.compilerargs}
    Compiler Debugging:         ${javac.debug} ${javac.debug-level}
    Java JVM Debug:             ${java.jvmarg-debug}
Local Configuration:            ${localconfig}
    Source Control Credentials: XXXXXXXXXXXXXXXXXXXXXXXXXX
    Environment:                ${thinkparity.environment}
    Mode:                       ${thinkparity.mode}
    Operating System:           ${thinkparity.os}
    Operating System Platform:  ${thinkparity.os-platform}
    Product Name:               ${thinkparity.product-name}
    Release Name:               ${thinkparity.release-name}
Targets:
    analyze                     Analyze the source.   
    checkout                    Checkout the source.
    clean                       Delete output.
    compile                     Compile source.
    javadoc                     Generate javadoc (html) documentation.
    process-resources           Process resources.
    test                        Run tests.
    test-compile                Compile the test source.
    test-process-resources      Process test resources.
Examples:
    First Run:
    ant checkout test           Will grab all source from cvs; process all
                                resources; compile all code and run all tests.

    Subsequent Runs:
    ant test                    Will process all resources; compile all code; run
                                all tests.
        </echo>
    </target>

    <!-- initialize -->
    <target name="init">
        <mkdir dir="${target.analyze-report.dir}"/>
        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.javadoc.dir}"/>
        <mkdir dir="${target.package.dir}"/>
        <mkdir dir="${target.test-javadoc.dir}"/>
        <mkdir dir="${target.test-classes.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-sessions.dir}"/>
        <sleep seconds="1"/>
    </target>

    <!-- analyze the source -->
    <target name="analyze" depends="init">
        <cs:checkstyle config="checkstyle-rules.xml"
            failureProperty="checkstyle.didFail" failOnViolation="false">
            <formatter type="xml" tofile="target/analyze-report/checkstyle.xml"/>
            <!-- common/codebase -->   
            <fileset dir="${thinkparity.common.home}/codebase/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- common/junitx -->   
            <fileset dir="${thinkparity.common.home}/junitx/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- common/model -->   
            <fileset dir="${thinkparity.common.home}/model/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- local/model -->   
            <fileset dir="local/browser/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- local/model -->   
            <fileset dir="local/model/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- local/thinkparity -->   
            <fileset dir="local/thinkparity/src/main/java">
                <include name="**/*.java"/>
            </fileset>
        </cs:checkstyle>
        <style in="target/analyze-report/checkstyle.xml"
                out="target/analyze-report/index.html"
                style="checkstyle-format.xsl"/>
    </target>

    <!-- document the source -->
    <target name="javadoc">
        <javadoc access="private" classpathref="compile.classpath"
                destdir="${target.javadoc.dir}"
                doctitle="thinkParity"
                group="thinkParity Codebase com.thinkparity.codebase*,thinkParity Model com.thinkparity.ophelia.model*,thinkParity Browser com.thinkparity.ophelia.browser*,thinkParity Bootstrap com.thinkparity.*"
                packagenames="com.thinkparity.*"
                sourcepath="${thinkparity.common.home}/codebase/src/main/java:${thinkparity.common.home}/model/src/main/java:${basedir}/local/model/src/main/java:${basedir}/local/browser/src/main/java:${basedir}/local/thinkparity/src/main/java">
            <group packages="com.thinkparity*" title="thinkParity Bootstrap"/>
            <group packages="com.thinkparity.codebase*" title="thinkParity Codebase"/>
            <group packages="com.thinkparity.ophelia.model*" title="thinkParity Model"/>
            <group packages="com.thinkparity.ophelia.browser*" title="thinkParity Browser"/>
        </javadoc>
    </target>

    <!-- document the test source -->
    <target name="test-javadoc">
        <javadoc access="private" classpathref="test.classpath"
                destdir="${target.test-javadoc.dir}"
                doctitle="thinkParity"
                group="thinkParity Codebase com.thinkparity.codebase*,thinkParity Model com.thinkparity.ophelia.model*,thinkParity Browser com.thinkparity.ophelia.browser*,thinkParity Bootstrap com.thinkparity.*"
                packagenames="com.thinkparity.*"
                sourcepath="${thinkparity.common.home}/codebase/src/test/java:${thinkparity.common.home}/model/src/test/java:${basedir}/local/model/src/test/java:${basedir}/local/browser/src/test/java">
            <group packages="com.thinkparity*" title="thinkParity Bootstrap"/>
            <group packages="com.thinkparity.codebase*" title="thinkParity Codebase"/>
            <group packages="com.thinkparity.ophelia.model*" title="thinkParity Model"/>
            <group packages="com.thinkparity.ophelia.browser*" title="thinkParity Browser"/>
        </javadoc>
    </target>

    <!-- process resources -->
    <target name="process-resources" depends="init">
        <copy todir="${target.classes.dir}">
            <fileset dir="${thinkparity.common.home}/codebase/src/main/resources"/>
            <fileset dir="${thinkparity.common.home}/model/src/main/resources"/>
            <fileset dir="${basedir}/local/browser/src/main/resources"/>
            <fileset dir="${basedir}/local/model/src/main/resources"/>
        </copy>
        <copy todir="${target.classes.dir}">
            <fileset dir="${basedir}/local/browser/src/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="pom.version" value="${release.version}"/>
                <filter token="com.thinkparity.parity.buildId" value="${thinkparity.build-id}"/>
                <filter token="com.thinkparity.parity.mode" value="${thinkparity.mode}"/>
                <filtersfile file="${basedir}/build.filters"/>
                <filtersfile file="${basedir}/local/browser/build.filters"/>
            </filterset>
        </copy>
    </target>

    <!-- unit test -->
    <target name="test" depends="test-compile">
        <!-- if junitx.log4j.* is not set; use defaults; otherwise use the
            values themselves -->
        <condition property="inner.junitx.log4j.level"
                value="${junitx.log4j.level}" else="INFO">
            <isset property="junitx.log4j.level"/>
        </condition>
        <condition property="inner.junitx.log4j.console"
                value="${junitx.log4j.console}" else="false">
            <isset property="junitx.log4j.console"/>
        </condition>
        <condition property="inner.test"
                value="**/${test}Test.class" else="**/*Test.class">
            <isset property="test"/>
        </condition>

        <junit fork="on" forkmode="once" reloading="false"
                        errorproperty="junit.didError" failureproperty="junit.didFail">
            <jvmarg value="-Dthinkparity.mode=${thinkparity.mode}"/>
            <jvmarg value="-Dthinkparity.environment=${thinkparity.environment}"/>
            <jvmarg value="-Djunitx.log4j.level=${inner.junitx.log4j.level}"/>
            <jvmarg value="-Djunitx.log4j.console=${inner.junitx.log4j.console}"/>

            <classpath refid="test.classpath"/>
            <formatter type="brief" usefile="false"/>

            <!-- execute batch tests -->
            <batchtest todir="${target.test-sessions.dir}">
                <formatter type="xml"/>
                <fileset dir="${target.test-classes.dir}" includes="${inner.test}"/>
            </batchtest>
        </junit>
        <delete dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <junitreport todir="${target.test-report.dir}">
            <fileset dir="${target.test-sessions.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report styledir="${basedir}" format="noframes" todir="${target.test-report.dir}"/>
        </junitreport>

        <fail message="JUnit failure." if="junit.didFail"/>
        <fail message="JUnit error." if="junit.didError"/>
    </target>

    <!-- compile tests -->
    <target name="test-compile" depends="compile,test-process-resources">
        <!-- common/junitx -->
        <javac srcdir="${thinkparity.common.home}/junitx/src/main/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- common/codebase -->
        <javac srcdir="${thinkparity.common.home}/codebase/src/test/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- common/model -->
        <javac srcdir="${thinkparity.common.home}/model/src/test/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- local/model -->
        <javac srcdir="local/model/src/test/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- local/browser -->
        <javac srcdir="local/browser/src/test/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
    </target>

    <!-- process test resources -->
    <target name="test-process-resources" depends="init">
        <copy todir="${target.test-classes.dir}">
            <fileset dir="${thinkparity.common.home}/junitx/src/main/resources"/>
            <fileset dir="${basedir}/local/model/src/test/resources"/>
        </copy>
    </target>

    <!-- deploy -->
    <target name="deploy" depends="package">
        <property name="thinkparity.target.classes-dir" value="${target.classes.dir}"/>
        <property name="thinkparity.target.package-dir" value="${target.package.dir}"/>
        <property name="thinkparity.target.workspace-dir" value="${target.dir}/workspace"/>
        <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="groovy.classpath"/>
        <groovy src="${basedir}/local/browser/src/main/groovy/DeployTask.groovy"/>
    </target>

    <!-- package-image -->
    <target name="package-image" depends="compile">
        <property name="thinkparity.target.classes-dir" value="${target.classes.dir}"/>
        <property name="thinkparity.target.package-dir" value="${target.package.dir}"/>
        <property name="thinkparity.target.workspace-dir" value="${target.dir}/workspace"/>
        <property name="thinkparity.jre-dir" value="${antx.vendor-dir}/i686/${thinkparity.os-platform}/sun.com/jre1.6.0"/>
        <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="groovy.classpath"/>
        <groovy src="${basedir}/local/browser/src/main/groovy/PackageImageTask.groovy"/>
    </target>

    <!-- package -->
    <target name="package" depends="compile">
        <property name="thinkparity.target.classes-dir" value="${target.classes.dir}"/>
        <property name="thinkparity.target.package-dir" value="${target.package.dir}"/>
        <property name="thinkparity.target.workspace-dir" value="${target.dir}/workspace"/>
        <property name="thinkparity.jre-dir" value="${antx.vendor-dir}/i686/${thinkparity.os-platform}/sun.com/jre1.6.0"/>
        <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="groovy.classpath"/>
        <groovy src="${basedir}/local/browser/src/main/groovy/PackageTask.groovy"/>
        <groovy src="${basedir}/local/browser/src/main/groovy/PackageImageTask.groovy"/>
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpathref="launch4j.classpath"/>
        <launch4j>
            <config dontWrapJar="true" headerType="0" jarPath="thinkParity.jar"
                    outfile="${target.package.dir}/thinkParity.exe"
                    errTitle="thinkParity - Error" customProcName="true"
                    stayAlive="false"
                    icon="${target.classes.dir}/images/ThinkParity32x32.ico"
                    chdir="${thinkparity.release-name}/lib/${thinkparity.os-platform}">
                <jre path="${thinkparity.release-name}/jre"
                    args="-Dthinkparity-dir=&quot;%EXEDIR%&quot; -Dthinkparity.mode=${thinkparity.mode} -Dthinkparity.environment=${thinkparity.environment}"/>
            </config>
        </launch4j>
    </target>

    <!-- package-installer -->
    <target name="package-installer" depends="package"
            description="compile a null-soft installer for the package">
        <copy todir="${target.package.dir}" file="${target.classes.dir}/install.nsi"/>
        <exec executable="${env.NSIS_HOME}/makensis.exe" dir="${target.package.dir}">
            <arg value="${target.package.dir}/install.nsi"/>
        </exec>
        <checksum file="${target.package.dir}/thinkParity-${thinkparity.release-name}.exe"
            algorithm="MD5"/>
        <checksum file="${target.package.dir}/thinkParity-${thinkparity.release-name}.exe"
            algorithm="SHA"/>
        <delete file="${target.package.dir}/install.nsi"/>
    </target>

    <!-- pathinfo -->
    <target name="pathinfo">
        <pathconvert refid="compile.classpath" property="tmp.cc"/>
        <echo>
Compile Classpath:
${tmp.cc}
        </echo>
        <pathconvert refid="test.classpath" property="tmp.tc"/>
        <echo>
Test Classpath:
${tmp.tc}
        </echo>
        <pathconvert refid="runtime.classpath" property="tmp.rc"/>
        <echo>
Runtime Classpath:
${tmp.rc}
        </echo>
        <pathconvert refid="runtime.dependencies-java" property="tmp.rdj"/>
        <echo>
Runtime Dependencies (Java):
${tmp.rdj}
        </echo>
        <pathconvert refid="runtime.dependencies-native" property="tmp.rdn"/>
        <echo>
Runtime Dependencies (Native):
${tmp.rdn}
        </echo>
        <pathconvert refid="test.dependencies-java" property="tmp.tdj"/>
        <echo>
Test Dependencies (Java):
${tmp.tdj}
        </echo>
        <pathconvert refid="test.dependencies-native" property="tmp.tdn"/>
        <echo>
Test Dependencies (Native):
${tmp.tdn}
        </echo>
    </target>
</project>
