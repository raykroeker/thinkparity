/*
 * UserInfoAvatar.java
 *
 * Created on December 6, 2006, 10:09 AM
 */

package com.thinkparity.ophelia.browser.application.browser.display.avatar.dialog.contact;

import java.awt.event.ActionEvent;

import javax.swing.AbstractAction;

import com.thinkparity.codebase.jabber.JabberId;

import com.thinkparity.codebase.model.user.User;

import com.thinkparity.ophelia.browser.application.browser.BrowserConstants;
import com.thinkparity.ophelia.browser.application.browser.BrowserConstants.Fonts;
import com.thinkparity.ophelia.browser.application.browser.component.ButtonFactory;
import com.thinkparity.ophelia.browser.application.browser.component.LabelFactory;
import com.thinkparity.ophelia.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.ophelia.browser.application.browser.display.provider.dialog.contact.UserInfoProvider;
import com.thinkparity.ophelia.browser.platform.action.Data;
import com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.ophelia.browser.platform.util.State;

/**
 * <b>Title:</b>thinkParity Ophelia UI User Info Avatar<br>
 * <b>Description:</b>Display user information.<br>
 * 
 * @author raymond@thinkparity.com
 * @version 1.1.2.1
 */
public final class UserInfoAvatar extends Avatar {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JLabel companyJLabel = new javax.swing.JLabel();
    private final javax.swing.JLabel inviteJLabel = LabelFactory.createLink("",Fonts.DialogFont);
    private final javax.swing.JLabel nameJLabel = new javax.swing.JLabel();
    private final javax.swing.JLabel titleJLabel = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables

    /**
     * Create UserInfoAvatar.
     * 
     */
    public UserInfoAvatar() {
        super("UserInfoAvatar", BrowserConstants.DIALOGUE_BACKGROUND);
        initComponents();
        bindEscapeKey();
    }

    public AvatarId getId() {
        return AvatarId.DIALOG_CONTACT_INFO;
    }

    public State getState() {
        return null;
    }

    public void reload() {
        if (input!=null) {
            final User user = readUser(getInputUserId());
            reloadInvite(user);
            nameJLabel.setText(user.getName());
            companyJLabel.setText(user.getOrganization());
            titleJLabel.setText(user.getTitle());
        }
    }

    public void setState(final State state) {
    }

    /**
     * Make the escape key behave like cancel.
     */
    private void bindEscapeKey() {
        bindEscapeKey("Cancel", new AbstractAction() {
            public void actionPerformed(final ActionEvent e) {
                disposeWindow();
            }
        });
    }

    private void closeJButtonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJButtonActionPerformed
        disposeWindow();
    }//GEN-LAST:event_closeJButtonActionPerformed

    /**
     * Determine if the specified user is a contact.
     * 
     * @param user
     *            A <code>User</code>.
     * @return True if the specified user is a contact; false otherwise.
     */
    private boolean doesExistContact(final User user) {
        return ((UserInfoProvider)contentProvider).readDoesExistContact(user.getLocalId()).booleanValue();
    }

    /**
     * Determine if the specified user is an outgoing user invitation.
     * 
     * @param user
     *            A <code>User</code>.
     * @return True if the specified user is an outgoing user invitation; false otherwise.
     */
    private boolean doesExistOutgoingUserInvitation(final User user) {
        return ((UserInfoProvider)contentProvider).readDoesExistOutgoingUserInvitationForUser(user.getLocalId()).booleanValue();
    }

    /**
     * Obtain the input user id.
     *
     * @return A user id.
     */
    private JabberId getInputUserId() {
        if (input!=null) {
            return (JabberId) ((Data) input).get(DataKey.USER_ID);
        } else {
            return null;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        final javax.swing.JButton closeJButton = ButtonFactory.create();
        final javax.swing.JLabel nameHeadingJLabel = new javax.swing.JLabel();
        final javax.swing.JLabel titleHeadingJLabel = new javax.swing.JLabel();
        final javax.swing.JLabel companyHeadingJLabel = new javax.swing.JLabel();

        closeJButton.setFont(Fonts.DialogButtonFont);
        closeJButton.setText(java.util.ResourceBundle.getBundle("localization/Browser_Messages").getString("UserInfoAvatar.Close"));
        closeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeJButtonActionPerformed(evt);
            }
        });

        nameHeadingJLabel.setFont(Fonts.DialogFont);
        nameHeadingJLabel.setText(java.util.ResourceBundle.getBundle("localization/Browser_Messages").getString("UserInfoAvatar.Name"));

        nameJLabel.setFont(Fonts.DialogFont);
        nameJLabel.setText("!name!");
        nameJLabel.setPreferredSize(new java.awt.Dimension(34, 20));

        titleHeadingJLabel.setFont(Fonts.DialogFont);
        titleHeadingJLabel.setText(java.util.ResourceBundle.getBundle("localization/Browser_Messages").getString("UserInfoAvatar.TitleLabel"));

        titleJLabel.setFont(Fonts.DialogFont);
        titleJLabel.setText("!title!");
        titleJLabel.setPreferredSize(new java.awt.Dimension(26, 20));

        companyHeadingJLabel.setFont(Fonts.DialogFont);
        companyHeadingJLabel.setText(java.util.ResourceBundle.getBundle("localization/Browser_Messages").getString("UserInfoAvatar.Company"));

        companyJLabel.setFont(Fonts.DialogFont);
        companyJLabel.setText("!company!");
        companyJLabel.setPreferredSize(new java.awt.Dimension(51, 20));

        inviteJLabel.setText(java.util.ResourceBundle.getBundle("localization/Browser_Messages").getString("UserInfoAvatar.Invite"));
        inviteJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inviteJLabelMousePressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(inviteJLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 181, Short.MAX_VALUE)
                        .add(closeJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(companyHeadingJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .add(titleHeadingJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, nameHeadingJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(companyJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 255, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(titleJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 255, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(nameJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 255, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameHeadingJLabel)
                    .add(nameJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titleHeadingJLabel)
                    .add(titleJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(companyHeadingJLabel)
                    .add(companyJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 19, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(closeJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(inviteJLabel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inviteJLabelMousePressed(final java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inviteJLabelMousePressed
        disposeWindow();
        getController().runCreateOutgoingUserInvitation(readUser(getInputUserId()).getLocalId());
    }//GEN-LAST:event_inviteJLabelMousePressed

    /**
     * Determine whether or not the invite user interface is enabled.
     * 
     * @param user
     *            A <code>User</code>.
     * @return True if the invite user interface is enabled.
     */
    private Boolean isInviteAvailable(final User user) {
        return ((UserInfoProvider)contentProvider).readIsInviteAvailable(user);
    }

    /**
     * Determine if we are online.
     * 
     * @return True if we are online.
     */
    private boolean isOnline() {
        return getController().isOnline().booleanValue();
    }

    /**
     * Read the user.
     *
     * @return The user.
     */
    private User readUser(final JabberId userId) {
        return ((UserInfoProvider)contentProvider).readUser(userId);
    }

    /**
     * Set the invite link visible or not as appropriate.
     * 
     * @param user
     *            The <code>User</code>.
     */
    private void reloadInvite(final User user) {
        inviteJLabel.setVisible(isOnline() && !doesExistContact(user)
                && !doesExistOutgoingUserInvitation(user)
                && isInviteAvailable(user));
    }

    public enum DataKey { USER_ID }
}
