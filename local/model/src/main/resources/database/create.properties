
################################################################################
## Inital Schema Creation
################################################################################
CreateMetaDataType:create table META_DATA_TYPE(\
	META_DATA_TYPE_ID smallint not null,\
	META_DATA_TYPE varchar(16) not null,\
	primary key(META_DATA_TYPE_ID),\
	unique(META_DATA_TYPE)\
)
CreateMetaData:create table META_DATA(\
	META_DATA_ID bigint generated always as identity(start with 1000),\
	META_DATA_TYPE_ID smallint not null,\
	META_DATA_KEY varchar(64) not null,\
	META_DATA_VALUE varchar(256) not null,\
	primary key(META_DATA_ID),\
	foreign key(META_DATA_TYPE_ID) references META_DATA_TYPE(META_DATA_TYPE_ID)\
)
CreateArtifactState:create table ARTIFACT_STATE(\
	ARTIFACT_STATE_ID smallint not null,\
	ARTIFACT_STATE varchar(16) not null,\
	primary key(ARTIFACT_STATE_ID),\
	unique(ARTIFACT_STATE)\
)
CreateArtifactType:create table ARTIFACT_TYPE(\
	ARTIFACT_TYPE_ID smallint not null,\
	ARTIFACT_TYPE varchar(16) not null,\
	primary key(ARTIFACT_TYPE_ID),\
	unique(ARTIFACT_TYPE)\
)
CreateArtifact:create table ARTIFACT(\
ARTIFACT_ID bigint generated always as identity(start with 2000),\
ARTIFACT_NAME varchar(256) not null,\
ARTIFACT_STATE_ID smallint not null,\
ARTIFACT_TYPE_ID smallint not null,\
ARTIFACT_UNIQUE_ID varchar(256) not null,\
CREATED_BY bigint not null,\
CREATED_ON timestamp not null,\
UPDATED_BY bigint not null,\
UPDATED_ON timestamp not null,\
FLAGS bigint not null,\
primary key(ARTIFACT_ID),\
unique(ARTIFACT_UNIQUE_ID),\
foreign key(ARTIFACT_STATE_ID) references ARTIFACT_STATE(ARTIFACT_STATE_ID),\
foreign key(ARTIFACT_TYPE_ID) references ARTIFACT_TYPE(ARTIFACT_TYPE_ID),\
foreign key(CREATED_BY) references PARITY_USER(USER_ID),\
foreign key(UPDATED_BY) references PARITY_USER(USER_ID)\
)
CreateArtifactTeamRel:create table ARTIFACT_TEAM_REL(\
	ARTIFACT_ID bigint not null,\
	USER_ID bigint not null,\
	primary key(ARTIFACT_ID, USER_ID),\
	foreign key(ARTIFACT_ID) references ARTIFACT(ARTIFACT_ID),\
	foreign key(USER_ID) references PARITY_USER(USER_ID)\
)
CreateArtifactVersion:create table ARTIFACT_VERSION(\
	ARTIFACT_ID bigint not null,\
	ARTIFACT_VERSION_ID bigint not null,\
	ARTIFACT_NAME varchar(256) not null,\
	ARTIFACT_TYPE varchar(16) not null,\
	ARTIFACT_UNIQUE_ID varchar(256) not null,\
	COMMENT varchar(128) default null,\
	CREATED_BY  bigint not null,\
	CREATED_ON timestamp not null,\
	UPDATED_BY  bigint not null,\
	UPDATED_ON timestamp not null,\
	primary key(ARTIFACT_ID, ARTIFACT_VERSION_ID),\
	foreign key(ARTIFACT_ID) references ARTIFACT(ARTIFACT_ID),\
	foreign key(ARTIFACT_UNIQUE_ID) references ARTIFACT(ARTIFACT_UNIQUE_ID),\
	foreign key(CREATED_BY) references PARITY_USER(USER_ID),\
	foreign key(UPDATED_BY) references PARITY_USER(USER_ID)\
)
CreateArtifactVersionMetaData:create table ARTIFACT_VERSION_META_DATA(\
	ARTIFACT_ID bigint not null,\
	ARTIFACT_VERSION_ID bigint not null,\
	ARTIFACT_VERSION_META_DATA_TYPE_ID smallint not null,\
	META_DATA_KEY varchar(64) not null,\
	META_DATA_VALUE varchar(256) not null,\
	primary key(ARTIFACT_ID,ARTIFACT_VERSION_ID,META_DATA_KEY),\
	foreign key(ARTIFACT_ID,ARTIFACT_VERSION_ID) references ARTIFACT_VERSION(ARTIFACT_ID,ARTIFACT_VERSION_ID),\
	foreign key(ARTIFACT_VERSION_META_DATA_TYPE_ID) references META_DATA_TYPE(META_DATA_TYPE_ID)\
)
CreateConfiguration:create table CONFIGURATION(\
	CONFIGURATION_KEY varchar(64) not null,\
	META_DATA_ID bigint not null,\
	foreign key(META_DATA_ID) references META_DATA(META_DATA_ID),\
	primary key(CONFIGURATION_KEY)\
)
CreateContainer:create table CONTAINER(\
	CONTAINER_ID bigint not null,\
	primary key(CONTAINER_ID),\
	foreign key(CONTAINER_ID) references ARTIFACT(ARTIFACT_ID)\
)
CreateContainerDraft:create table CONTAINER_DRAFT(\
CONTAINER_ID bigint not null,\
OWNER bigint not null,\
LOCAL char not null,\
primary key(CONTAINER_ID),\
foreign key(CONTAINER_ID,OWNER) references ARTIFACT_TEAM_REL(ARTIFACT_ID,USER_ID),\
foreign key(CONTAINER_ID) references CONTAINER(CONTAINER_ID),\
foreign key(OWNER) references PARITY_USER(USER_ID)\
)
CreateContainerDraftArtifactRel:create table CONTAINER_DRAFT_ARTIFACT_REL(\
CONTAINER_ID bigint not null,\
ARTIFACT_ID bigint not null,\
ARTIFACT_STATE varchar(16) not null,\
primary key(CONTAINER_ID,ARTIFACT_ID),\
foreign key(CONTAINER_ID) references CONTAINER_DRAFT(CONTAINER_ID),\
foreign key(ARTIFACT_ID) references ARTIFACT(ARTIFACT_ID)\
)
CreateContainerDraftDocument:create table CONTAINER_DRAFT_DOCUMENT(\
CONTAINER_ID bigint not null,\
DOCUMENT_ID bigint not null,\
CONTENT blob not null,\
CONTENT_SIZE bigint not null,\
CONTENT_CHECKSUM varchar(256) not null,\
CHECKSUM_ALGORITHM varchar(16) not null,\
primary key(CONTAINER_ID,DOCUMENT_ID),\
foreign key(CONTAINER_ID) references CONTAINER_DRAFT(CONTAINER_ID),\
foreign key(DOCUMENT_ID) references DOCUMENT(DOCUMENT_ID)\
)
CreateContainerVersion:create table CONTAINER_VERSION(\
	CONTAINER_ID bigint not null,\
	CONTAINER_VERSION_ID bigint not null,\
	primary key(CONTAINER_ID,CONTAINER_VERSION_ID),\
	foreign key(CONTAINER_ID, CONTAINER_VERSION_ID) references ARTIFACT_VERSION(ARTIFACT_ID, ARTIFACT_VERSION_ID)\
)
CreateContainerVersionArtifactVersionRel:create table CONTAINER_VERSION_ARTIFACT_VERSION_REL(\
	CONTAINER_ID bigint not null,\
	CONTAINER_VERSION_ID bigint not null,\
	ARTIFACT_ID bigint not null,\
	ARTIFACT_VERSION_ID bigint not null,\
	ARTIFACT_TYPE_ID smallint not null,\
	primary key(CONTAINER_ID,CONTAINER_VERSION_ID,ARTIFACT_ID,ARTIFACT_VERSION_ID),\
	foreign key(CONTAINER_ID,CONTAINER_VERSION_ID) references CONTAINER_VERSION(CONTAINER_ID,CONTAINER_VERSION_ID),\
	foreign key(ARTIFACT_ID,ARTIFACT_VERSION_ID) references ARTIFACT_VERSION(ARTIFACT_ID,ARTIFACT_VERSION_ID),\
	foreign key(ARTIFACT_TYPE_ID) references ARTIFACT_TYPE(ARTIFACT_TYPE_ID)\
)
CreateContainerVersionDelta:create table CONTAINER_VERSION_DELTA(\
	CONTAINER_VERSION_DELTA_ID  bigint generated always as identity(start with 4000),\
	CONTAINER_ID bigint not null,\
	COMPARE_CONTAINER_VERSION_ID bigint not null,\
	COMPARE_TO_CONTAINER_VERSION_ID bigint not null,\
	primary key(CONTAINER_VERSION_DELTA_ID),\
	unique(CONTAINER_ID,COMPARE_CONTAINER_VERSION_ID,COMPARE_TO_CONTAINER_VERSION_ID),\
	foreign key(CONTAINER_ID,COMPARE_CONTAINER_VERSION_ID) references CONTAINER_VERSION(CONTAINER_ID,CONTAINER_VERSION_ID),\
	foreign key(CONTAINER_ID,COMPARE_TO_CONTAINER_VERSION_ID) references CONTAINER_VERSION(CONTAINER_ID,CONTAINER_VERSION_ID)\
)
CreateContainerVersionArtifactVersionDelta:create table CONTAINER_VERSION_ARTIFACT_VERSION_DELTA(\
	CONTAINER_VERSION_DELTA_ID bigint not null,\
	DELTA varchar(8) not null,\
	DELTA_ARTIFACT_ID bigint not null,\
	DELTA_ARTIFACT_VERSION_ID bigint not null,\
	primary key(CONTAINER_VERSION_DELTA_ID,DELTA_ARTIFACT_ID,DELTA_ARTIFACT_VERSION_ID),\
	foreign key(DELTA_ARTIFACT_ID,DELTA_ARTIFACT_VERSION_ID) references ARTIFACT_VERSION(ARTIFACT_ID,ARTIFACT_VERSION_ID)\
)
CreateContainerVersionPublishedTo:create table CONTAINER_VERSION_PUBLISHED_TO(\
	CONTAINER_ID bigint not null,\
	CONTAINER_VERSION_ID bigint not null,\
	USER_ID bigint not null,\
	PUBLISHED_ON timestamp,\
	RECEIVED_ON timestamp,\
	primary key(CONTAINER_ID,CONTAINER_VERSION_ID,USER_ID,PUBLISHED_ON),\
	foreign key(CONTAINER_ID,CONTAINER_VERSION_ID) references CONTAINER_VERSION(CONTAINER_ID,CONTAINER_VERSION_ID),\
	foreign key(USER_ID) references PARITY_USER(USER_ID)\
)
CreateDocument:create table DOCUMENT(\
DOCUMENT_ID bigint not null,\
primary key(DOCUMENT_ID),\
foreign key(DOCUMENT_ID) references ARTIFACT(ARTIFACT_ID)\
)
CreateDocumentVersion:create table DOCUMENT_VERSION(\
	DOCUMENT_ID bigint not null,\
	DOCUMENT_VERSION_ID bigint not null,\
	CONTENT blob not null,\
	CONTENT_SIZE bigint not null,\
	CONTENT_CHECKSUM varchar(256) not null,\
	CHECKSUM_ALGORITHM varchar(16) not null,\
	primary key(DOCUMENT_ID, DOCUMENT_VERSION_ID),\
	foreign key(DOCUMENT_ID, DOCUMENT_VERSION_ID) references ARTIFACT_VERSION(ARTIFACT_ID, ARTIFACT_VERSION_ID)\
)
CreateEmail:create table EMAIL(\
	EMAIL_ID bigint generated always as identity(start with 5000),\
	EMAIL varchar(512) not null,\
	primary key(EMAIL_ID),\
	unique(EMAIL)\
)
CreateUser:create table PARITY_USER(\
USER_ID bigint generated always as identity(start with 7000),\
JABBER_ID varchar(512) not null,\
NAME varchar(64) not null,\
ORGANIZATION varchar(64) not null,\
TITLE varchar(64) not null,\
FLAGS bigint not null,\
primary key(USER_ID),\
unique(JABBER_ID)\
)
CreateProfile:create table PROFILE(\
PROFILE_ID bigint not null,\
PROFILE_VCARD clob not null,\
primary key(PROFILE_ID),\
foreign key(PROFILE_ID) references PARITY_USER(USER_ID)\
)
CreateProfileEmailRel:create table PROFILE_EMAIL_REL(\
PROFILE_ID bigint not null,\
EMAIL_ID bigint not null,\
VERIFIED char not null,\
primary key(PROFILE_ID,EMAIL_ID),\
foreign key(PROFILE_ID) references PARITY_USER(USER_ID),\
foreign key(EMAIL_ID) references EMAIL(EMAIL_ID)\
)
CreateProfileFeature:create table PROFILE_FEATURE(\
PROFILE_ID bigint not null,\
FEATURE_ID bigint generated always as identity(start with 9000),\
FEATURE_NAME varchar(16) not null,\
primary key(FEATURE_ID),\
unique(FEATURE_NAME),\
foreign key(PROFILE_ID) references PROFILE(PROFILE_ID)\
)
CreateContact:create table CONTACT(\
CONTACT_ID bigint not null,\
CONTACT_VCARD clob not null,\
primary key(CONTACT_ID),\
foreign key(CONTACT_ID) references PARITY_USER(USER_ID)\
)
CreateContactEmailRel:create table CONTACT_EMAIL_REL(\
	CONTACT_ID bigint not null,\
	EMAIL_ID bigint not null,\
	primary key(CONTACT_ID,EMAIL_ID),\
	foreign key(CONTACT_ID) references CONTACT(CONTACT_ID),\
	foreign key(EMAIL_ID) references EMAIL(EMAIL_ID)\
)
CreateContactInvitation:create table CONTACT_INVITATION(\
CONTACT_INVITATION_ID bigint generated always as identity(start with 8000),\
CREATED_ON timestamp not null,\
CREATED_BY bigint not null,\
primary key(CONTACT_INVITATION_ID),\
foreign key(CREATED_BY) references PARITY_USER(USER_ID)\
)
CreateContactInvitationIncomingEMail:create table CONTACT_INVITATION_INCOMING_EMAIL(\
CONTACT_INVITATION_ID bigint not null,\
EMAIL_ID bigint not null,\
EXTENDED_BY_USER_ID bigint not null,\
primary key(CONTACT_INVITATION_ID),\
unique(EMAIL_ID,EXTENDED_BY_USER_ID),\
foreign key(CONTACT_INVITATION_ID) references CONTACT_INVITATION(CONTACT_INVITATION_ID),\
foreign key(EMAIL_ID) references EMAIL(EMAIL_ID),\
foreign key(EXTENDED_BY_USER_ID) references PARITY_USER(USER_ID)\
)
CreateContactInvitationIncomingUser:create table CONTACT_INVITATION_INCOMING_USER(\
CONTACT_INVITATION_ID bigint not null,\
EXTENDED_BY_USER_ID bigint not null,\
primary key(CONTACT_INVITATION_ID),\
unique(EXTENDED_BY_USER_ID),\
foreign key(CONTACT_INVITATION_ID) references CONTACT_INVITATION(CONTACT_INVITATION_ID),\
foreign key(EXTENDED_BY_USER_ID) references PARITY_USER(USER_ID)\
)
CreateContactInvitationOutgoingEMail:create table CONTACT_INVITATION_OUTGOING_EMAIL(\
CONTACT_INVITATION_ID bigint not null,\
EMAIL_ID bigint not null,\
primary key(CONTACT_INVITATION_ID),\
unique(EMAIL_ID),\
foreign key(CONTACT_INVITATION_ID) references CONTACT_INVITATION(CONTACT_INVITATION_ID),\
foreign key(EMAIL_ID) references EMAIL(EMAIL_ID)\
)
CreateContactInvitationOutgoingUser:create table CONTACT_INVITATION_OUTGOING_USER(\
CONTACT_INVITATION_ID bigint not null,\
USER_ID bigint not null,\
primary key(CONTACT_INVITATION_ID),\
unique(USER_ID),\
foreign key(CONTACT_INVITATION_ID) references CONTACT_INVITATION(CONTACT_INVITATION_ID),\
foreign key(USER_ID) references PARITY_USER(USER_ID)\
)
CreateProduct:create table PRODUCT(\
PRODUCT_ID bigint generated always as identity (start with 1000),\
PRODUCT_NAME varchar(64) not null,\
INSTALLED_RELEASE_ID bigint not null,\
LATEST_RELEASE_ID bigint not null,\
PREVIOUS_RELEASE_ID bigint,\
primary key(PRODUCT_ID),\
unique(PRODUCT_NAME),\
foreign key(INSTALLED_RELEASE_ID) references PRODUCT_RELEASE(RELEASE_ID),\
foreign key(LATEST_RELEASE_ID) references PRODUCT_RELEASE(RELEASE_ID),\
foreign key(PREVIOUS_RELEASE_ID) references PRODUCT_RELEASE(RELEASE_ID)\
)
CreateProductRelease:create table PRODUCT_RELEASE(\
RELEASE_ID bigint generated always as identity (start with 3000),\
RELEASE_NAME varchar(64) not null,\
RELEASE_OS varchar(32) not null,\
RELEASE_DATE timestamp not null,\
RELEASE_INITIALIZED char not null,\
primary key(RELEASE_ID),\
unique(RELEASE_NAME)\
)
CreateProductReleaseResource:create table PRODUCT_RELEASE_RESOURCE(\
RELEASE_ID bigint not null,\
RESOURCE_ID bigint generated always as identity (start with 4000),\
RESOURCE_CHECKSUM varchar(256) not null,\
RESOURCE_CHECKSUM_ALGORITHM varchar(16) not null,\
RESOURCE_PATH varchar(256) not null,\
RESOURCE_SIZE bigint not null,\
primary key(RESOURCE_ID),\
unique(RELEASE_ID,RESOURCE_PATH),\
foreign key(RELEASE_ID) references PRODUCT_RELEASE(RELEASE_ID)\
)
################################################################################

################################################################################
## Indicies
################################################################################
CreateIndexUserName:create index USER_NAME on PARITY_USER(NAME)
CreateIndexUserOrganization:create index USER_ORGANIZATION on PARITY_USER(ORGANIZATION)
CreateIndexEmail:create index EMAIL_EMAIL on EMAIL(EMAIL)

################################################################################
## Seed Data
################################################################################
InsertSeedMetaDataType:insert into \
META_DATA_TYPE(META_DATA_TYPE_ID,META_DATA_TYPE) \
values(?,?)
InsertSeedVersion:insert into \
META_DATA(META_DATA_TYPE_ID,META_DATA_KEY,META_DATA_VALUE) \
values(?,?,?)
InsertSeedArtifactState:insert into \
ARTIFACT_STATE(ARTIFACT_STATE_ID,ARTIFACT_STATE) \
values(?,?)
InsertSeedArtifactType:insert into \
ARTIFACT_TYPE(ARTIFACT_TYPE_ID,ARTIFACT_TYPE) \
values(?,?)
ReadMetaDataReleaseId:select META_DATA_VALUE \
from META_DATA \
where META_DATA_ID=? and META_DATA_TYPE_ID=? and META_DATA_KEY=?
################################################################################
