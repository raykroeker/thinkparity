/*
 * Jan 20, 2006
 */
package com.thinkparity.browser.application.browser.display.avatar;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

import javax.swing.*;
import javax.swing.border.Border;

import com.thinkparity.browser.application.browser.component.LabelFactory;
import com.thinkparity.browser.application.browser.component.ListFactory;
import com.thinkparity.browser.application.browser.component.ScrollPaneFactory;
import com.thinkparity.browser.application.browser.display.avatar.history.CellRenderer2;
import com.thinkparity.browser.application.browser.display.provider.CompositeFlatSingleContentProvider;
import com.thinkparity.browser.javax.swing.AbstractJPanel;
import com.thinkparity.browser.javax.swing.border.BottomBorder;
import com.thinkparity.browser.javax.swing.border.MultiLineBorder;
import com.thinkparity.browser.javax.swing.border.TopBorder;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.ImageIOUtil;
import com.thinkparity.browser.platform.util.State;

import com.thinkparity.codebase.assertion.Assert;

import com.thinkparity.model.parity.model.document.Document;
import com.thinkparity.model.parity.model.document.history.HistoryItem;

/**
 * @author raykroeker@gmail.com
 * @version 1.1
 */
public class DocumentHistoryAvatar2 extends Avatar {

	private static final BufferedImage HEADING;

	private static final Icon HIDE_HISTORY_ICON;
	
	private static final Icon HIDE_HISTORY_ROLLOVER_ICON;

	/**
	 * @see java.io.Serializable
	 * 
	 */
	private static final long serialVersionUID = 1;

	static {
		HEADING = ImageIOUtil.read("InfoDisplay.png");
		HIDE_HISTORY_ICON = ImageIOUtil.readIcon("HideHistoryButton.png");
		HIDE_HISTORY_ROLLOVER_ICON = ImageIOUtil.readIcon("HideHistoryButtonRollover.png");
	}

	private HeadingJPanel heading;

	private JList historyJList;

	private JScrollPane historyJListJScrollPane;

	/**
	 * The history list model.
	 * 
	 */
	private DefaultListModel historyModel;

	/**
	 * Create a DocumentHistoryAvatar.
	 * 
	 */
	protected DocumentHistoryAvatar2() {
		super("DocumentHistory", Color.WHITE);
		initComponents();
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getId()
	 * 
	 */
	public AvatarId getId() { return AvatarId.DOCUMENT_HISTORY2; }
	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getState()
	 * 
	 */
	public State getState() { return null; }

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#reload()
	 * 
	 */
	public void reload() {
		reloadHistory();
		reloadDocument();

revalidate();
doLayout();
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#setInput(java.lang.Object)
	 * 
	 */
	public void setInput(final Object input) {
		Assert.assertNotNull(
				"Document history requires java.lang.Long input.", input);
		Assert.assertOfType(
				"Document history requires java.lang.Long input.",
				Long.class, input);
		this.input = input;
		reload();
	}

    /**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#setState(com.thinkparity.browser.platform.util.State)
	 * 
	 */
	public void setState(final State state) {}

	/**
	 * Obtain the document.
	 * 
	 * @param documentId
	 *            The document id.
	 * @return The document
	 */
	private Document getDocument(final Long documentId) {
		return (Document)
		((CompositeFlatSingleContentProvider) contentProvider).getElement(0, documentId);

	}

	/**
	 * Obtain the history.
	 * 
	 * @param documentId
	 *            The document id.
	 * @return The history.
	 */
	private HistoryItem[] getHistory(final Long documentId) {
		return (HistoryItem[])
			((CompositeFlatSingleContentProvider) contentProvider).getElements(0, documentId);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
        heading = new HeadingJPanel();

        historyModel = new DefaultListModel();
        historyJList = ListFactory.create();
        historyJList.setBorder(null);
        historyJList.setCellRenderer(new CellRenderer2());
        historyJList.setFixedCellHeight(42);
        historyJList.setModel(historyModel);

        historyJListJScrollPane = ScrollPaneFactory.create();
        historyJListJScrollPane.setBorder(new TopBorder(new Color(153, 153, 153, 255)));
        historyJListJScrollPane.setViewportView(historyJList);
        historyJListJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        historyJListJScrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));

        setLayout(new GridBagLayout());

        final GridBagConstraints gbc = new GridBagConstraints();

        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1;
        gbc.ipady = 1;
        add(heading, gbc.clone());

        gbc.gridy = 1;
        gbc.insets.left = 1;
        gbc.insets.right = 2;
        gbc.insets.top = 2;
        gbc.insets.bottom = 1;
        gbc.weightx = 1;
        gbc.weighty = 1;
        add(historyJListJScrollPane, gbc.clone());
    }// </editor-fold>

	/**
	 * Load the history into the model.
	 * 
	 * @param model
	 *            The model to load.
	 * @param history
	 *            The history.
	 */
	private void loadHistory(final DefaultListModel model,
			final HistoryItem[] history) {
		for(final HistoryItem historyItem : history) {
			logger.debug("Adding item:  " + historyItem.getEvent());
			model.addElement(historyItem);
		}
	}

	/**
	 * Reload the document.
	 *
	 */
	private void reloadDocument() {
		heading.headingJLabel.setText(getString("Title.Empty"));
		if(null != input) {
			final Document d = getDocument((Long) input);
			heading.headingJLabel.setText(getString("Title", new Object[] {d.getName()}));
		}
	}

	/**
	 * Reload the history model.
	 * 
	 */
	private void reloadHistory() {
		historyModel.clear();
		if(null != input) {
			loadHistory(historyModel, getHistory((Long) input));
		}
	}

	/**
	 * The heading panel for the history avatar.
	 * 
	 */
	private class HeadingJPanel extends AbstractJPanel {

		/**
		 * @see java.io.Serializable
		 * 
		 */
		private static final long serialVersionUID = 1;

		private JLabel headingJLabel;

		private JLabel showHistoryJLabel;

		private HeadingJPanel() {
			super("");
			final Border b1 = new BottomBorder(new Color(153, 153, 153, 255));
			final Border b2 = new MultiLineBorder(new Color[] {new Color(137, 139,142, 255), new Color(238, 238, 238, 255)});
			final Border b3 = BorderFactory.createCompoundBorder(b1, b2);
			setBorder(b3);
			initComponents();
		}

		/**
		 * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
		 */
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			final Graphics2D g2 = (Graphics2D) g.create();
			try { g2.drawImage(HEADING, 0, getInsets().top, this); }
			finally { g2.dispose(); }
		}

		private void initComponents() {
			headingJLabel = LabelFactory.create();

			showHistoryJLabel = LabelFactory.create(HIDE_HISTORY_ICON);
			showHistoryJLabel.addMouseListener(new MouseAdapter() {
				public void mouseClicked(final MouseEvent e) {
					getController().toggleHistory2Avatar();
				}
				public void mouseEntered(final MouseEvent e) {
					showHistoryJLabel.setIcon(HIDE_HISTORY_ROLLOVER_ICON);
				}
				public void mouseExited(final MouseEvent e) {
					showHistoryJLabel.setIcon(HIDE_HISTORY_ICON);
				}
			});

			setLayout(new GridBagLayout());

			final GridBagConstraints gbc = new GridBagConstraints();
			gbc.anchor = GridBagConstraints.WEST;
			gbc.fill = GridBagConstraints.BOTH;
			gbc.insets.left = 7;
			gbc.weightx = 1;
			gbc.weighty = 1;
			add(headingJLabel, gbc.clone());

			gbc.anchor = GridBagConstraints.EAST;
			gbc.fill = GridBagConstraints.NONE;
			gbc.insets.left = 0;
			gbc.insets.right = 7;
			gbc.weightx = 0;
			gbc.weighty = 0;
			add(showHistoryJLabel, gbc.clone());
		}
	}

}
