/*
 * Jan 20, 2006
 */
package com.thinkparity.browser.application.browser.display.avatar;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ScrollPaneConstants;

import com.thinkparity.browser.application.browser.BrowserConstants;
import com.thinkparity.browser.application.browser.component.LabelFactory;
import com.thinkparity.browser.application.browser.component.ListFactory;
import com.thinkparity.browser.application.browser.component.ScrollPaneFactory;
import com.thinkparity.browser.application.browser.display.avatar.history.CellRenderer;
import com.thinkparity.browser.application.browser.display.provider.CompositeFlatSingleContentProvider;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.ImageIOUtil;
import com.thinkparity.browser.platform.util.State;

import com.thinkparity.codebase.assertion.Assert;

import com.thinkparity.model.parity.model.document.Document;
import com.thinkparity.model.parity.model.document.history.HistoryItem;

/**
 * @author raykroeker@gmail.com
 * @version 1.1
 */
class DocumentHistoryAvatar extends Avatar {

	/**
	 * History list bg color.
	 * 
	 */
	private static final Color HISTORY_LIST_BACKGROUND;

	/**
	 * @see java.io.Serializable
	 * 
	 */
	private static final long serialVersionUID = 1;

	/**
	 * The title foreground color.
	 * 
	 */
	private static final Color TITLE_FOREGROUND;

	private static final BufferedImage WINDOW_IMAGE;

	static {
        // COLOR History List Background
		HISTORY_LIST_BACKGROUND = new Color(103, 111, 128, 255);

		// COLOR History Title Foreground
		TITLE_FOREGROUND = Color.WHITE;

		WINDOW_IMAGE = ImageIOUtil.read("HistoryWindow.png");
	}

	// Variables declaration - do not modify
	private javax.swing.JList historyJList;

	private javax.swing.JScrollPane historyJListJScrollPane;

	/**
	 * The history list model.
	 * 
	 */
	private DefaultListModel historyModel;

	private javax.swing.JLabel titleJLabel;
	// End of variables declaration

	/**
	 * Create a DocumentHistoryAvatar.
	 * 
	 */
	protected DocumentHistoryAvatar() {
		super("DocumentHistory");
		initComponents();
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getId()
	 * 
	 */
	public AvatarId getId() { return AvatarId.DOCUMENT_HISTORY; }

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getState()
	 * 
	 */
	public State getState() { return null; }

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#reload()
	 * 
	 */
	public void reload() {
		reloadHistory();
		reloadDocument();

revalidate();
doLayout();
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#setInput(java.lang.Object)
	 * 
	 */
	public void setInput(final Object input) {
		Assert.assertNotNull(
				"Document history requires java.lang.Long input.", input);
		Assert.assertOfType(
				"Document history requires java.lang.Long input.",
				Long.class, input);
		this.input = input;
		reload();
	}
	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#setState(com.thinkparity.browser.platform.util.State)
	 * 
	 */
	public void setState(final State state) {}

	/**
	 * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
	 * 
	 */
	protected void paintComponent(Graphics g) {
		final Graphics2D g2 = (Graphics2D) g.create();
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		super.paintComponent(g2);
		try { g2.drawImage(WINDOW_IMAGE, 0, 0, this); }
		finally { g2.dispose(); }
	}

	/**
	 * Obtain the document.
	 * 
	 * @param documentId
	 *            The document id.
	 * @return The document
	 */
	private Document getDocument(final Long documentId) {
		return (Document)
		((CompositeFlatSingleContentProvider) contentProvider).getElement(0, documentId);

	}

	/**
	 * Obtain the history.
	 * 
	 * @param documentId
	 *            The document id.
	 * @return The history.
	 */
	private HistoryItem[] getHistory(final Long documentId) {
		return (HistoryItem[])
			((CompositeFlatSingleContentProvider) contentProvider).getElements(0, documentId);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
        titleJLabel = LabelFactory.create();
        titleJLabel.setFont(BrowserConstants.TitleFont);
        titleJLabel.setForeground(TITLE_FOREGROUND);

        historyModel = new DefaultListModel();
        historyJList = ListFactory.create();
        historyJList.setBackground(HISTORY_LIST_BACKGROUND);
        historyJList.setCellRenderer(new CellRenderer());
        historyJList.setFixedCellHeight(60);
        historyJList.setModel(historyModel);

        historyJListJScrollPane = ScrollPaneFactory.create();
        historyJListJScrollPane.setViewportView(historyJList);
        historyJListJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        historyJListJScrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, historyJListJScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, titleJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(titleJLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(historyJListJScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>

	/**
	 * Load the history into the model.
	 * 
	 * @param model
	 *            The model to load.
	 * @param history
	 *            The history.
	 */
	private void loadHistory(final DefaultListModel model,
			final HistoryItem[] history) {
		for(final HistoryItem historyItem : history) {
			logger.debug("Adding item:  " + historyItem.getEvent());
			model.addElement(historyItem);
		}
	}

	/**
	 * Reload the document.
	 *
	 */
	private void reloadDocument() {
		titleJLabel.setText(getString("Title.Empty"));
		if(null != input) {
			final Document d = getDocument((Long) input);
			titleJLabel.setText(getString("Title", new Object[] {d.getName()}));
		}
	}

	/**
	 * Reload the history model.
	 * 
	 */
	private void reloadHistory() {
		historyModel.clear();
		if(null != input) {
			loadHistory(historyModel, getHistory((Long) input));
		}
	}
}
