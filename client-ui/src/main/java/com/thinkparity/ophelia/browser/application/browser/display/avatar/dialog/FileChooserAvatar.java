/*
 * FileChooserAvatar.java
 *
 * Created on March 12, 2007, 6:11 PM
 */

package com.thinkparity.ophelia.browser.application.browser.display.avatar.dialog;

import java.awt.event.ActionEvent;
import java.io.File;

import javax.swing.AbstractAction;
import javax.swing.JFileChooser;

import com.thinkparity.codebase.swing.ThinkParityJFileChooser;

import com.thinkparity.ophelia.browser.application.browser.BrowserConstants;
import com.thinkparity.ophelia.browser.application.browser.BrowserConstants.Fonts;
import com.thinkparity.ophelia.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.ophelia.browser.platform.action.Data;
import com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.ophelia.browser.platform.util.State;

/**
 *
 * @author  user
 */
public class FileChooserAvatar extends Avatar {

    /** Creates new form FileChooserAvatar */
    public FileChooserAvatar() {
        super("FileChooserDialog", BrowserConstants.DIALOGUE_BACKGROUND);
        bindEscapeKey("Cancel", new AbstractAction() {
            public void actionPerformed(final ActionEvent e) {
                disposeWindow();
            }
        });
        initComponents();
    }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#getAvatarTitle()
     */
    @Override
    public String getAvatarTitle() {
        final StringBuffer title = new StringBuffer("Title");
        if (null != input && null != getInputSource()) {
            title.append(getInputSource());
        }
        return getString(title.toString());
    }

    /**
     * Get the file chooser.
     * 
     * @return A <code>ThinkParityJFileChooser</code>.
     */
    public ThinkParityJFileChooser getFileChooser() {
        return (ThinkParityJFileChooser)jFileChooser;
    }

    public AvatarId getId() { return AvatarId.DIALOG_FILE_CHOOSER; }

    public State getState() { return null; }

    public Boolean isInputValid() {
        final File file = jFileChooser.getSelectedFile();
        return (null != file && file.exists());
    }

    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#reload()
     * 
     */
    public void reload() {
        if (input != null) {
            reloadApproveButtonText();
            reloadCurrentDirectory();
            reloadFileSelectionMode();
            reloadMultiSelection();
        }
    }

    public void setState(final State state) {}

    /**
     * Obtain the input current directory.
     *
     * @return The current directory <code>File</code>.
     */
    private File getInputCurrentDirectory() {
        return (File) ((Data) input).get(DataKey.CURRENT_DIRECTORY);
    }

    /**
     * Obtain the input file selection mode.
     *
     * @return The file selection mode <code>Integer</code>.
     */
    private Integer getInputFileSelectionMode() {
        return (Integer) ((Data) input).get(DataKey.FILE_SELECTION_MODE);
    }

    /**
     * Obtain the input multi selection flag.
     *
     * @return The multi selection <code>Boolean</code>.
     */
    private Boolean getInputMultiSelection() {
        return (Boolean) ((Data) input).get(DataKey.MULTI_SELECTION);
    }

    /**
     * Obtain the input source.
     *
     * @return The source <code>String</code>.
     */
    private String getInputSource() {
        return (String) ((Data) input).get(DataKey.SOURCE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser.setFont(Fonts.DialogFont);
        jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserActionPerformed
        if (getFileChooser().getState()!=JFileChooser.APPROVE_OPTION || isInputValid()) {
            disposeWindow();
        }
    }//GEN-LAST:event_jFileChooserActionPerformed

    private void reloadApproveButtonText() {
        final StringBuffer approveButtonText = new StringBuffer("ApproveButton");
        if (null != getInputSource()) {
            approveButtonText.append(getInputSource());
        }
        jFileChooser.setApproveButtonText(getString(approveButtonText.toString()));
    }

    private void reloadCurrentDirectory() {
        final File currentDirectory = getInputCurrentDirectory();
        if (null != currentDirectory) {
            jFileChooser.setCurrentDirectory(currentDirectory);
        }
    }

    private void reloadFileSelectionMode() {
        jFileChooser.setFileSelectionMode(getInputFileSelectionMode().intValue());
    }

    private void reloadMultiSelection() {
        jFileChooser.setMultiSelectionEnabled(getInputMultiSelection().booleanValue());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JFileChooser jFileChooser = new ThinkParityJFileChooser();
    // End of variables declaration//GEN-END:variables

    /** Data keys. */
    public enum DataKey { CURRENT_DIRECTORY, FILE_SELECTION_MODE, MULTI_SELECTION, SOURCE }
}
