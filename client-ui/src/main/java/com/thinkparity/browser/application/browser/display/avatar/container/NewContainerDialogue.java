/*
 * NewContainerDialogue.java
 *
 * Created on July 14, 2006, 2:21 PM
 */

package com.thinkparity.browser.application.browser.display.avatar.container;

import java.io.File;
import java.util.List;

import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

import com.thinkparity.browser.application.browser.BrowserConstants;
import com.thinkparity.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.browser.application.browser.display.avatar.document.RenameDialog.DataKey;
import com.thinkparity.browser.platform.action.Data;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.State;
import com.thinkparity.browser.platform.util.SwingUtil;

/**
 *
 * @author  Administrator
 */
public class NewContainerDialogue extends Avatar {
    
    /** @see java.io.Serializable */
    private static final long serialVersionUID = 1;
    
    /** Creates new form NewContainerDialogue */
    public NewContainerDialogue() {
        super("NewContainerDialog", BrowserConstants.DIALOGUE_BACKGROUND);
        initComponents();
        initNameJTextField();
        newContainerJPanel.setBackground(BrowserConstants.DIALOGUE_BACKGROUND);
    }

    public void setState(final State state) {
    }

    public State getState() {
        return null;
    }
    
    /**
     * Determine whether the user input for the frame is valid.
     * 
     * @return True if the input is valid; false otherwise.
     */
    public Boolean isInputValid() {
        final String name = nameJTextField.getText();
        if(null != name && 0 < name.length()) { return Boolean.TRUE; }
        else { return Boolean.FALSE; }
    }
    
    public void reload() {
        // Adjust the embedded assistance if a list of documents is provided.
        prepareExplanationText();
        
        // Clear controls and set focus, and disable the OK button.
        nameJTextField.setText("");
        okJButton.setEnabled(Boolean.FALSE);
        nameJTextField.requestFocusInWindow();
    }
    
    public AvatarId getId() {
        return AvatarId.NEW_CONTAINER_DIALOGUE;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        explanationJTextArea = new javax.swing.JTextArea();
        newContainerJPanel = new javax.swing.JPanel();
        nameJLabel = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        okJButton = new javax.swing.JButton();
        cancelJButton = new javax.swing.JButton();

        explanationJTextArea.setColumns(20);
        explanationJTextArea.setEditable(false);
        explanationJTextArea.setFont(new java.awt.Font("Tahoma", 0, 11));
        explanationJTextArea.setLineWrap(true);
        explanationJTextArea.setRows(5);
        explanationJTextArea.setText(java.util.ResourceBundle.getBundle("com/thinkparity/browser/platform/util/l10n/JPanel_Messages").getString("NewContainerDialog.Explanation"));
        explanationJTextArea.setWrapStyleWord(true);
        explanationJTextArea.setBorder(null);
        explanationJTextArea.setFocusable(false);
        explanationJTextArea.setOpaque(false);

        newContainerJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(java.util.ResourceBundle.getBundle("com/thinkparity/browser/platform/util/l10n/JPanel_Messages").getString("NewContainerDialog.BorderTitle")));
        nameJLabel.setText(java.util.ResourceBundle.getBundle("com/thinkparity/browser/platform/util/l10n/JPanel_Messages").getString("NewContainerDialog.Name"));

        org.jdesktop.layout.GroupLayout newContainerJPanelLayout = new org.jdesktop.layout.GroupLayout(newContainerJPanel);
        newContainerJPanel.setLayout(newContainerJPanelLayout);
        newContainerJPanelLayout.setHorizontalGroup(
            newContainerJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(newContainerJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(nameJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nameJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap())
        );
        newContainerJPanelLayout.setVerticalGroup(
            newContainerJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(newContainerJPanelLayout.createSequentialGroup()
                .add(newContainerJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameJLabel)
                    .add(nameJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        okJButton.setText(java.util.ResourceBundle.getBundle("com/thinkparity/browser/platform/util/l10n/JPanel_Messages").getString("NewContainerDialog.Ok"));
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });

        cancelJButton.setText(java.util.ResourceBundle.getBundle("com/thinkparity/browser/platform/util/l10n/JPanel_Messages").getString("NewContainerDialog.Cancel"));
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(201, Short.MAX_VALUE)
                .add(okJButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancelJButton)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, explanationJTextArea, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, newContainerJPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {cancelJButton, okJButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(explanationJTextArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(newContainerJPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelJButton)
                    .add(okJButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okJButtonActionPerformed
        if(isInputValid()) {
            final String containerName = nameJTextField.getText();
            getController().runCreateContainer(containerName);
            disposeWindow();
        }
    }//GEN-LAST:event_okJButtonActionPerformed

    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJButtonActionPerformed
        disposeWindow();
    }//GEN-LAST:event_cancelJButtonActionPerformed
    
    private void initNameJTextField() {
        Document document = nameJTextField.getDocument();
        document.addDocumentListener( new DocumentHandler() );        
    }
    
    // Enable or disable the OK control. Some notes:
    //    - ActionPerformed on a JTextField will happen when press enter.
    //    - TextChanged message is received after user presses letter but before extractName() will see it.
    //    - The correct way to enable and disable the OK control is with the document interface.    
    class DocumentHandler implements DocumentListener {
        // Handle insertions into the text field
        public void insertUpdate( DocumentEvent event ) {
            if ( isInputValid() ) {
                okJButton.setEnabled(Boolean.TRUE);
            }
            else {
                okJButton.setEnabled(Boolean.FALSE);
            }
        }
        
        // Handle deletions from the text field
        public void removeUpdate( DocumentEvent event ) {
            // Do the same check as insertUpdate()
            insertUpdate( event );
        }
        
        // Handle changes to the text field
        public void changedUpdate( DocumentEvent event ) {
            // Nothing to do here
        }
    }
    
    /**
     * Dispose of the window.
     */
    private void disposeWindow() {
        SwingUtilities.getWindowAncestor(this).dispose();
    }
    
    /**
     * Prepare explanation text.
     */
    private void prepareExplanationText() {
        // Adjust the embedded assistance if a list of documents is provided.
        explanationJTextArea.setText(getString("Explanation"));          
        if(null != input) {
            final Integer numFiles = (Integer) ((Data) input).get(DataKey.NUM_FILES);
            if (numFiles == 1) {
                final String firstFileName = (String) ((Data) input).get(DataKey.FIRST_FILE_NAME);
                explanationJTextArea.setText(getString("ExplanationForOneFile", new Object[] { firstFileName }));                
            }
            else if (numFiles > 1) {
                final String firstFileName = (String) ((Data) input).get(DataKey.FIRST_FILE_NAME);
                explanationJTextArea.setText(getString("ExplanationForManyFiles", new Object[] { firstFileName, numFiles }));
            }
        }        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelJButton;
    private javax.swing.JTextArea explanationJTextArea;
    private javax.swing.JLabel nameJLabel;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JPanel newContainerJPanel;
    private javax.swing.JButton okJButton;
    // End of variables declaration//GEN-END:variables

    public enum DataKey { NUM_FILES, FIRST_FILE_NAME }
}
