/*
 * Created On: November 22, 2006, 10:48 AM
 */
package com.thinkparity.ophelia.browser.application.system.notify;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.text.MessageFormat;
import java.util.List;
import java.util.Vector;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

import com.thinkparity.codebase.swing.AbstractJPanel;

import com.thinkparity.ophelia.browser.util.ImageIOUtil;

/**
 * @author raymond@thinkparity.com
 * @version 1.1.2.1
 */
public final class NotifyPanel extends AbstractJPanel {

    /** The notify panel's background <code>BufferedImage</code>. */
    private static final BufferedImage BACKGROUND;

    /** Close label icon. */
    private static final Icon CLOSE_ICON;

    /** Close label rollover icon. */
    private static final Icon CLOSE_ROLLOVER_ICON;

    private static final ImageIcon[] NEXT_ICONS;

    /** A singleton list of notifications. */
    private static final List<Notification> NOTIFICATIONS;

    private static final ImageIcon[] PREVIOUS_ICONS;

    static {
        BACKGROUND = ImageIOUtil.read("Dialog_Background.png");
        CLOSE_ICON = ImageIOUtil.readIcon("Dialog_CloseButton.png");
        CLOSE_ROLLOVER_ICON = ImageIOUtil.readIcon("Dialog_CloseButtonRollover.png");
        PREVIOUS_ICONS = new ImageIcon[] {
                ImageIOUtil.readIcon("ScrollLeftButton.png"),
                ImageIOUtil.readIcon("ScrollLeftButtonRollover.png") };
        NEXT_ICONS = new ImageIcon[] {
                ImageIOUtil.readIcon("ScrollRightButton.png"),
                ImageIOUtil.readIcon("ScrollRightButtonRollover.png") };
        NOTIFICATIONS = new Vector<Notification>();
    }

    private int notificationIndex;

    private final StringBuffer notificationText;

    /** The background image scaled. */
    private Image scaledBackground;

    /**
     * Creates NotifyPanel.
     * 
     */
    NotifyPanel() {
        super();
        initComponents();
        this.notificationIndex = 0;
        this.notificationText = new StringBuffer();
    }

    /**
     * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
     *
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (null == scaledBackground) {
            scaledBackground = BACKGROUND.getScaledInstance(
                    getWidth(), getHeight(), Image.SCALE_SMOOTH);
        }
        final Graphics2D g2 = (Graphics2D) g.create();
        try {
            g2.drawImage(scaledBackground, 0, 0, getWidth(), getHeight(), null);
        } finally {
            g2.dispose();
        }
    }

    /**
     * Reload the notifications.
     * 
     * @param notifications
     *            A <code>Notification</code> <code>List</code>.
     */
    void display(final Notification notification) {
        NOTIFICATIONS.add(notification);
        reload();
    }

    private void reload() {
        reloadCount();
        reloadNext();
        reloadPrevious();
        reloadNotification();
    }

    private void closeJLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeJLabelMouseClicked
        ((JLabel) evt.getSource()).setIcon(CLOSE_ICON);
        closeNotifyPanel();
    }//GEN-LAST:event_closeJLabelMouseClicked

    private void closeJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeJLabelMouseEntered
        ((JLabel) evt.getSource()).setIcon(CLOSE_ROLLOVER_ICON);
    }//GEN-LAST:event_closeJLabelMouseEntered

    private void closeJLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeJLabelMouseExited
        ((JLabel) evt.getSource()).setIcon(CLOSE_ICON);
    }//GEN-LAST:event_closeJLabelMouseExited

    private void closeNotifyPanel() {
        NOTIFICATIONS.clear();
        notificationIndex = 0;
        disposeWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        notificationJPanel = new javax.swing.JPanel();
        controlJPanel = new javax.swing.JPanel();
        countJLabel = new javax.swing.JLabel();
        previousJLabel = new javax.swing.JLabel();
        nextJLabel = new javax.swing.JLabel();
        logoJLabel = new javax.swing.JLabel();
        notificationJLabel = new javax.swing.JLabel();
        closeJLabel = new javax.swing.JLabel();

        setOpaque(false);
        notificationJPanel.setOpaque(false);
        controlJPanel.setOpaque(false);
        countJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        countJLabel.setText(" ");

        previousJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ScrollLeftButton.png")));
        previousJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previousJLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                previousJLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                previousJLabelMouseExited(evt);
            }
        });

        nextJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ScrollRightButton.png")));
        nextJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextJLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nextJLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nextJLabelMouseExited(evt);
            }
        });

        logoJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icon16x16Orange.png")));

        org.jdesktop.layout.GroupLayout controlJPanelLayout = new org.jdesktop.layout.GroupLayout(controlJPanel);
        controlJPanel.setLayout(controlJPanelLayout);
        controlJPanelLayout.setHorizontalGroup(
            controlJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, controlJPanelLayout.createSequentialGroup()
                .add(previousJLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 49, Short.MAX_VALUE)
                .add(nextJLabel))
            .add(logoJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
            .add(countJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
        );
        controlJPanelLayout.setVerticalGroup(
            controlJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, controlJPanelLayout.createSequentialGroup()
                .add(logoJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(countJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(controlJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, previousJLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, nextJLabel)))
        );

        notificationJLabel.setText("!Notification text!");
        notificationJLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        org.jdesktop.layout.GroupLayout notificationJPanelLayout = new org.jdesktop.layout.GroupLayout(notificationJPanel);
        notificationJPanel.setLayout(notificationJPanelLayout);
        notificationJPanelLayout.setHorizontalGroup(
            notificationJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(notificationJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(controlJPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(notificationJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
        );
        notificationJPanelLayout.setVerticalGroup(
            notificationJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(notificationJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(notificationJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, notificationJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, controlJPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        closeJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Dialog_CloseButton.png")));
        closeJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeJLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeJLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeJLabelMouseExited(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(notificationJPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(closeJLabel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(closeJLabel)
                .addContainerGap(98, Short.MAX_VALUE))
            .add(notificationJPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void nextJLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextJLabelMouseClicked
        if (isNextEnabled()) {
            notificationIndex++;
            reload();
        }
    }//GEN-LAST:event_nextJLabelMouseClicked
    private void nextJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextJLabelMouseEntered
        if (isNextEnabled()) {
            ((JLabel) evt.getSource()).setIcon(NEXT_ICONS[1]);
        }
    }//GEN-LAST:event_nextJLabelMouseEntered
    private void nextJLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextJLabelMouseExited
        if (isNextEnabled()) {
            ((JLabel) evt.getSource()).setIcon(NEXT_ICONS[0]);
        }
    }//GEN-LAST:event_nextJLabelMouseExited
    private void previousJLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousJLabelMouseClicked
        if (isPreviousEnabled()) {
            notificationIndex--;
            reload();
        }
    }//GEN-LAST:event_previousJLabelMouseClicked
    private void previousJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousJLabelMouseEntered
        if (isPreviousEnabled()) {
            ((JLabel) evt.getSource()).setIcon(PREVIOUS_ICONS[1]);
        }
    }//GEN-LAST:event_previousJLabelMouseEntered
    private void previousJLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousJLabelMouseExited
        if (isPreviousEnabled()) {
            ((JLabel) evt.getSource()).setIcon(PREVIOUS_ICONS[0]);
        }
    }//GEN-LAST:event_previousJLabelMouseExited

    private void reloadCount() {
        if (NOTIFICATIONS.size() > 0)
            countJLabel.setText(MessageFormat.format("{0} of {1}",
                    notificationIndex + 1, NOTIFICATIONS.size()));
        else
            countJLabel.setText(" ");
    }

    private void reloadNext() {
        if (isNextEnabled()) {
            nextJLabel.setEnabled(true);
        } else {
            nextJLabel.setEnabled(false);
        }
    }

    private boolean isNextEnabled() {
        // if there is more than one notification and the current index is
        // not the last spot; enable the button
        if (NOTIFICATIONS.size() > 1) {
            if (notificationIndex < NOTIFICATIONS.size() - 1) {
                return true;
            }
        }
        return false;
    }

    private void reloadNotification() {
        if (notificationIndex >= 0 && notificationIndex < NOTIFICATIONS.size()) {
            notificationText.setLength(0);
            notificationText.append("<html>")
                .append(NOTIFICATIONS.get(notificationIndex).getMessage())
                .append("</html>");
            notificationJLabel.setText(notificationText.toString());
        } else {
            notificationJLabel.setText(" ");
        }
    }

    private void reloadPrevious() {
        if (isPreviousEnabled()) {
            previousJLabel.setEnabled(true);
        } else {
            previousJLabel.setEnabled(false);
        }
    }

    private boolean isPreviousEnabled() {
        // if there is more than one notification and the current index is
        // not the first spot; enable the button
        if (NOTIFICATIONS.size() > 1) {
            if (notificationIndex > 0) {
                return true;
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel closeJLabel;
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JLabel countJLabel;
    private javax.swing.JLabel logoJLabel;
    private javax.swing.JLabel nextJLabel;
    private javax.swing.JLabel notificationJLabel;
    private javax.swing.JPanel notificationJPanel;
    private javax.swing.JLabel previousJLabel;
    // End of variables declaration//GEN-END:variables
}
