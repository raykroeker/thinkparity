<?xml version="1.0"?>
<project name="ophelia-plugin-archive" default="help" basedir="."
        xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
    <property name="build.sysclasspath" value="ignore"/>

    <!-- build configuration -->
    <property environment="env"/>
    <tstamp>
        <format property="build.id" pattern="yyyy-MM-dd HH:mm:ss Z" timezone="PST"/>
    </tstamp>
    <!-- local configuration  -->
    <property file="local.properties"/>

    <!-- release configuration -->
    <property name="release.name" value="thinkParity Archive"/>
    <property name="release.version" value="1.0.0-RC23"/>
    <property name="release.serverhost" value="thinkparity.dyndns.org"/>

    <!-- cvs configuration -->
    <property name="cvs.compressionlevel" value="9"/>
    <property name="cvs.cvsroot" value=":pserver:tpdev.thinkparity.com:2401/home/cvs/repositories/thinkparity.com"/>
    <property name="cvs.branch" value="v1_0"/>
    <property name="cvs.modules" value="local/browser-plugins/archive"/>
    <property name="cvs.modules.ide" value=""/>

    <!-- output directories -->
	<property name="target.dir" value="${basedir}/target/browser-plugins/archive"/>
    <property name="target.analyze-report.dir" value="${target.dir}/analyze-report"/>   
    <property name="target.release.dir" value="${target.dir}/release"/>
	<property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.javadoc.dir" value="${target.dir}/docs/api"/>
	<property name="target.test-classes.dir" value="${target.dir}/test-classes"/>
	<property name="target.test-report.dir" value="${target.dir}/test-report"/>
	<property name="target.test-sessions.dir" value="${target.dir}/test-sessions"/>

    <!-- classpath -->
	<path id="project.classpath">
		<pathelement location="${basedir}/target/classes"/>
		<pathelement location="${target.classes.dir}"/>

        <pathelement location="${basedir}/vendor/jdic/0.9.1/${platform}/jdic.jar"/>
		<pathelement location="${basedir}/vendor/log4j/1.2.13/log4j.jar"/>
	</path>
    <!-- test classpath -->
    <path id="project.test-classpath">
        <path refid="project.classpath"/>

        <pathelement location="${target.test-classes.dir}"/>

        <pathelement location="${basedir}/vendor/junit/3.8.1/junit.jar"/>
        <pathelement location="${basedir}/vendor/hsqldb/1.8.0.2/hsqldb.jar"/>
    </path>

    <!-- release -->
    <target name="release">
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="test" inheritAll="true" inheritRefs="true"/>
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile" inheritAll="true" inheritRefs="true"/>
        <antcall target="release-impl" inheritAll="true" inheritRefs="true"/>
    </target>

    <!-- release -->
    <target name="release-impl">
        <copy todir="${target.release.dir}">
            <fileset file="${basedir}/LICENSE.txt"/>
            <fileset file="${basedir}/README.txt"/>
            <fileset dir="${target.classes.dir}">
                <include name="META-INF/*"/>
            </fileset>
        </copy>
        <mkdir dir="${target.release.dir}/lib"/>
        <jar destfile="${target.release.dir}/lib/plugin-archive.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <exclude name="META-INF**/*"/>
            </fileset>
        </jar>
        <jar destfile="${target.release.dir}/${release.name}.par"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.release.dir}"/>
        </jar>

        <mkdir dir="${basedir}/target/release/plugins"/>
        <copy todir="${basedir}/target/release/plugins">
            <fileset file="${target.release.dir}/${release.name}.par"/>
        </copy>
        <!-- nsis -->
        <copy todir="${basedir}/target/release">
            <fileset file="${target.classes.dir}/install-plugin-archive.nsi"/>
        </copy>
        <property name="nsis.install.dir" value="${env.ProgramFiles}\NSIS"/>
        <exec executable="${nsis.install.dir}/makensis.exe" dir="${basedir}/target/release">
            <arg value="install-plugin-archive.nsi"/>
        </exec>
        <checksum file="${basedir}/target/release/thinkParity-${release.version} Archive.exe"
            algorithm="MD5"/>
        <checksum file="${basedir}/target/release/thinkParity-${release.version} Archive.exe"
            algorithm="SHA"/>
    </target>

    <!-- checkout -->
    <target name="checkout">
        <echo message="${cvs.compressionlevel}"/>
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.branch}"/>
        <echo message="${cvs.modules}"/>
        <echo message="${cvs.modules.ide}"/>
        <sleep seconds="3"/>
        <!-- source trees -->
        <cvs cvsroot="${cvs.cvsroot}"
            command="checkout" compressionlevel="${cvs.compressionlevel}"
            tag="${cvs.branch}" package="${cvs.modules}" dest="${basedir}"/>
        <!-- ide files -->
        <cvs cvsroot="${cvs.cvsroot}"
            command="export -d &quot;${basedir}/ide&quot;"
             compressionlevel="${cvs.compressionlevel}" tag="${cvs.branch}"
             package="${cvs.modules.ide}" dest="${basedir}"/>
        <move todir="${basedir}">
            <fileset dir="${basedir}/ide"/>
        </move>
    </target>

    <!-- delete output -->
	<target name="clean">
		<delete dir="${target.dir}"/>
	</target>

    <!-- compile -->
	<target name="compile" depends="init,process-resources">
        <!-- if the compile.debug is not set; use true as a default otherwise
             use the value itself -->
        <condition property="compile.innerDebug" value="${compile.debug}" else="true">
            <isset property="compile.debug"/>
        </condition>

        <!-- plugins/archive -->
        <javac srcdir="${basedir}/local/browser-plugins/archive/main/java"
                destdir="${target.classes.dir}" debug="${compile.innerDebug}">
			<classpath refid="project.classpath"/>
        </javac>
	</target>

    <!-- print help -->
    <target name="help">
        <echo>
Options:
    -Dcompile.debug=true,false  Generate compiler debug info.
                                Default:true
Targets:
    analyze                     Analyze the source.   
    checkout                    Checkout all source.
    checkout.ide                Checkout ide configuration files.
    clean                       Delete output.
    compile                     Compile source.
    javadoc                     Generate javadoc (html) documentation.
    process-resources           Process resources.
    tag                         Tag the release.
    test                        Run tests.
    test-compile                Compile test source.
    test-process-resources      Process test resources.
    test-report                 Produce a test report.
    update                      Update source with latest from CVS.
Examples:
    First Run:
    ant checkout test           Will grab all source from cvs; process all
                                resources; compile all code and run all tests.

    Subsequent Runs:
    ant test                    Will process all resources; compile all code; run
                                all tests.
        </echo>
    </target>

    <!-- initialize output -->
	<target name="init">
        <mkdir dir="${target.analyze-report.dir}"/>
        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.javadoc.dir}"/>
		<mkdir dir="${target.test-classes.dir}"/>
		<mkdir dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-sessions.dir}"/>
	</target>

    <!-- analyze the source -->
    <target name="analyze" depends="init">
        <cs:checkstyle config="checkstyle-rules.xml"
            failureProperty="checkstyle.didFail" failOnViolation="false">
            <formatter type="xml" tofile="target/analyze-report/checkstyle.xml"/>
            <fileset dir="${basedir}/local/browser-plugins/archive/main/java">
                <include name="**/*.java"/>
            </fileset>
        </cs:checkstyle>
        <style in="target/analyze-report/checkstyle.xml"
                out="target/analyze-report/index.html"
                style="checkstyle-format.xsl"/>
    </target>

    <!-- document the source -->
    <target name="javadoc">
    </target>

    <!-- process resources -->
    <target name="process-resources" depends="init">
        <!-- plugins/archive -->
        <copy todir="${target.classes.dir}">
            <fileset dir="${basedir}/local/browser-plugins/archive/main/resources"/>
        </copy>
        <copy todir="${target.classes.dir}">
            <fileset dir="${basedir}/local/browser-plugins/archive/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="pom.version" value="${release.version}"/>
                <filter token="com.thinkparity.parity.buildId" value="${build.id}"/>
                <filter token="com.thinkparity.parity.mode" value="${thinkparity.innerMode}"/>
                <filtersfile file="${basedir}/build.filters"/>
                <filtersfile file="${basedir}/local/browser/build.filters"/>
            </filterset>
        </copy>
    </target>

    <!-- tag cvs -->
    <target name="tag">
        <input addproperty="cvs.tag" message="Release tag (REL_vX_X[_RCX]:"/>
        <echo message="${cvs.tag}"/>
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.tag}"/>
        <cvs cvsroot="${cvs.cvsroot}"
            command="tag -c -F -R ${cvs.tag} .cvsignore build.filters build.xml LICENSE.txt README.txt ${cvs.modules}"/>
    </target>

    <!-- unit test -->
	<target name="test" depends="test-compile">
        <!-- if junitx.log4j.* is not set; use defaults; otherwise use the
            values themselves -->
        <condition property="inner.junitx.log4j.level"
                value="${junitx.log4j.level}" else="INFO">
            <isset property="junitx.log4j.level"/>
        </condition>
        <condition property="inner.junitx.log4j.console"
                value="${junitx.log4j.console}" else="false">
            <isset property="junitx.log4j.console"/>
        </condition>

        <junit fork="on" forkmode="once" reloading="false"
		        errorproperty="junit.didError" failureproperty="junit.didFail">
            <jvmarg value="-Djunitx.log4j.level=${inner.junitx.log4j.level}"/>
            <jvmarg value="-Djunitx.log4j.console=${inner.junitx.log4j.console}"/>

			<classpath refid="project.test-classpath"/>
			<formatter type="brief" usefile="false"/>

            <!-- execute single test -->
		    <test if="test" name="${test}" todir="${target.test-sessions.dir}">
		        <formatter type="xml"/>
		    </test>

		    <!-- execute batch tests -->
		    <batchtest unless="test" todir="${target.test-sessions.dir}">
                <formatter type="xml"/>
			</batchtest>
		</junit>
        <antcall target="test-report" inheritRefs="true" inheritAll="true"/>

        <fail message="JUnit failure." if="junit.didFail"/>
        <fail message="JUnit error." if="junit.didError"/>
	</target>

    <!-- unit test report -->
    <target name="test-report">
        <delete dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <junitreport todir="${target.test-report.dir}">
            <fileset dir="${target.test-sessions.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report styledir="${basedir}" format="noframes" todir="${target.test-report.dir}"/>
        </junitreport>
    </target>

    <!-- compile tests -->
	<target name="test-compile" depends="compile,test-process-resources">
        <!-- if the compile.debug is not set; use true as a default otherwise
             use the value itself -->
        <condition property="compile.innerDebug" value="${compile.debug}" else="true">
            <isset property="compile.debug"/>
        </condition>
	</target>

    <!-- process test resources -->
    <target name="test-process-resources">
    </target>

     <!-- update -->
    <target name="update">
        <echo message="${cvs.cvsroot}"/>
        <cvs cvsroot="${cvs.cvsroot}"
            command="update -P" tag="${cvs.branch}" package="${cvs.modules}"/>
    </target>

    <!-- quick release -->
    <target name="quick-release">
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile" inheritAll="true" inheritRefs="true"/>
        <antcall target="release-impl" inheritAll="true" inheritRefs="true"/>
    </target>

    <!-- quick-release-install -->
    <target name="quick-release-install">
        <antcall target="quick-release" inheritAll="true" inheritRefs="true"/>
        <copy file="${target.release.dir}/${release.name}.par"
                todir="${basedir}/target/classes/plugins"/>
    </target>
</project>
