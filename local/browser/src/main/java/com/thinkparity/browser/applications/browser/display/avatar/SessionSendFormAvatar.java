/*
 * Jan 30, 2006
 */
package com.thinkparity.browser.applications.browser.display.avatar;

import java.awt.Color;
import java.util.Collection;
import java.util.UUID;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ListSelectionModel;

import com.thinkparity.browser.applications.browser.component.ButtonFactory;
import com.thinkparity.browser.applications.browser.component.CheckBoxFactory;
import com.thinkparity.browser.applications.browser.component.ComboBoxFactory;
import com.thinkparity.browser.applications.browser.component.LabelFactory;
import com.thinkparity.browser.applications.browser.component.ListFactory;
import com.thinkparity.browser.applications.browser.component.ScrollPaneFactory;
import com.thinkparity.browser.applications.browser.display.avatar.session.UserListCellRenderer;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.State;
import com.thinkparity.browser.platform.util.SwingUtil;

import com.thinkparity.model.parity.ParityException;
import com.thinkparity.model.parity.model.document.DocumentVersion;
import com.thinkparity.model.xmpp.user.User;

/**
 * @author raykroeker@gmail.com
 * @version 1.1
 */
public class SessionSendFormAvatar extends Avatar {

	/**
	 * @see java.io.Serializable
	 * 
	 */
	private static final long serialVersionUID = 1;

	// Variables declaration - do not modify
	private javax.swing.JButton cancelJButton;

	private javax.swing.JLabel contactJLabel;

	private javax.swing.JList contactsJList;

	private javax.swing.JScrollPane contactsJScrollPane;

	private DefaultListModel contactsModel;

	private DefaultListSelectionModel contactsSelectionModel;

	private javax.swing.JCheckBox ownershipJCheckBox;

	private javax.swing.JButton sendJButton;

	private javax.swing.JLabel teamJLabel;

	private javax.swing.JList teamJList;

	private javax.swing.JScrollPane teamJScrollPane;

	private DefaultListModel teamModel;

	private DefaultListSelectionModel teamSelectionModel;

	private javax.swing.JComboBox versionJComboBox;

	private javax.swing.JLabel versionJLabel;

	private DefaultComboBoxModel versionModel;

	/**
	 * Create a SessionSendFormAvatar.
	 * 
	 */
	public SessionSendFormAvatar() {
		// COLOR 237, 241, 244, 255
		super("SessionSendForm", ScrollPolicy.NONE, new Color(237, 241, 244,
				255));
		initComponents();
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getId()
	 * 
	 */
	public AvatarId getId() {
		return AvatarId.SESSION_SEND_FORM;
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#getState()
	 * 
	 */
	public State getState() {
		return null;
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#reload()
	 * 
	 */
	public void reload() {
		cancelJButton.setEnabled(true);
		sendJButton.setEnabled(true);
		reloadVersions();
		reloadTeamMembers();
		reloadContacts();
	}

	/**
	 * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#setState(com.thinkparity.browser.platform.util.State)
	 * 
	 */
	public void setState(final State state) {}

	private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {
		getController().displayMainBrowserAvatar();
	}

	private Collection<User> extractContacts() {
		return SwingUtil.extract(contactsJList);
	}

	private UUID extractDocumentId() {
		return (UUID) input;
	}

	private Collection<User> extractTeam() {
		return SwingUtil.extract(teamJList);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		versionModel = new DefaultComboBoxModel();
		versionJLabel = LabelFactory.create();
		versionJComboBox = ComboBoxFactory.create();
		versionJComboBox.setModel(versionModel);
		teamJLabel = LabelFactory.create();
		contactJLabel = LabelFactory.create();
		teamModel = new DefaultListModel();
		teamSelectionModel = new DefaultListSelectionModel();
		teamJScrollPane = ScrollPaneFactory.create();
		teamJList = ListFactory.create();
		teamJList.setSelectionMode(
				ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		teamJList.setModel(teamModel);
		teamJList.setSelectionModel(teamSelectionModel);
		teamJList.setCellRenderer(new UserListCellRenderer());
		teamJList.setBackground(getBackground());
		contactsModel = new DefaultListModel();
		contactsSelectionModel = new DefaultListSelectionModel();
		contactsJScrollPane = ScrollPaneFactory.create();
		contactsJList = ListFactory.create();
		contactsJList.setSelectionMode(
				ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		contactsJList.setModel(contactsModel);
		contactsJList.setSelectionModel(contactsSelectionModel);
		contactsJList.setCellRenderer(new UserListCellRenderer());
		contactsJList.setBackground(getBackground());
		ownershipJCheckBox = CheckBoxFactory.create();
		cancelJButton = ButtonFactory.create();
		sendJButton = ButtonFactory.create();

		versionJLabel.setText("Version:");

		// versionJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new
		// String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

		teamJLabel.setText("Team Members:");

		contactJLabel.setText("Contacts:");

		// teamJList.setModel(new javax.swing.AbstractListModel() {
		// String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5"
		// };
		// public int getSize() { return strings.length; }
		// public Object getElementAt(int i) { return strings[i]; }
		// });
		teamJScrollPane.setViewportView(teamJList);

		// contactsJList.setModel(new javax.swing.AbstractListModel() {
		// String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5"
		// };
		// public int getSize() { return strings.length; }
		// public Object getElementAt(int i) { return strings[i]; }
		// });
		contactsJScrollPane.setViewportView(contactsJList);

		ownershipJCheckBox.setText("Include Ownership");
		ownershipJCheckBox.setBorder(javax.swing.BorderFactory
				.createEmptyBorder(0, 0, 0, 0));
		ownershipJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
		ownershipJCheckBox.setOpaque(false);

		cancelJButton.setText("Cancel");
		cancelJButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelJButtonActionPerformed(evt);
			}
		});

		sendJButton.setText("Send");
		sendJButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sendJButtonActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																org.jdesktop.layout.GroupLayout.TRAILING,
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								versionJLabel)
																						.add(
																								teamJLabel)
																						.add(
																								contactJLabel))
																		.add(
																				21,
																				21,
																				21)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.TRAILING)
																						.add(
																								contactsJScrollPane,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								282,
																								Short.MAX_VALUE)
																						.add(
																								teamJScrollPane,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								282,
																								Short.MAX_VALUE)
																						.add(
																								versionJComboBox,
																								0,
																								282,
																								Short.MAX_VALUE)
																						.add(
																								org.jdesktop.layout.GroupLayout.LEADING,
																								ownershipJCheckBox)))
														.add(
																org.jdesktop.layout.GroupLayout.TRAILING,
																layout
																		.createSequentialGroup()
																		.add(
																				sendJButton)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				cancelJButton)))
										.addContainerGap()));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(versionJLabel)
														.add(
																versionJComboBox,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(teamJLabel)
														.add(
																teamJScrollPane,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																82,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				contactsJScrollPane,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				83,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				ownershipJCheckBox)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																						.add(
																								cancelJButton)
																						.add(
																								sendJButton)))
														.add(contactJLabel))
										.addContainerGap(
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
	}// </editor-fold>

	// End of variables declaration

	public Boolean isInputValid() {
		UUID documentId;
		try { documentId = extractDocumentId(); }
		catch(final Throwable t) { return Boolean.FALSE; }

		Collection<User> users = null;
		try { users = extractTeam(); }
		catch(final Throwable t) { return Boolean.FALSE; }

		try { users.addAll(extractContacts()); }
		catch(final Throwable t) { return Boolean.FALSE; }

		if (null != documentId && 0 < users.size()) { return Boolean.TRUE; }
		else { return Boolean.FALSE; }
	}

	private void reloadContacts() {
		contactsModel.clear();
		try {
			loadUserList(contactsModel, getSessionModel().getRosterEntries());
		}
		catch(final ParityException px) { throw new RuntimeException(px); }
	}

	private void loadUserList(final DefaultListModel listModel,
			final Collection<User> users) {
		for(final User user : users) { listModel.addElement(user); }
	}

	private void reloadTeamMembers() { teamModel.clear(); }

	private void reloadVersions() {
		versionModel.removeAllElements();
		if (null != input) {
			try {
				final Collection<DocumentVersion> versions = getDocumentModel()
						.listVersions((UUID) input);
				versionModel.addElement(getString("WorkingVersion"));
				for (final DocumentVersion version : versions) {
					versionModel.addElement(version.getVersionId());
				}
			}
			catch(final ParityException px) {
				throw new RuntimeException(px);
			}
		}
	}

	private void sendJButtonActionPerformed(java.awt.event.ActionEvent evt) {
		if(isInputValid()) {
			final Collection<User> users = extractTeam();
			users.addAll(extractContacts());
			final UUID documentId = extractDocumentId();
			toggleVisualFeedback(Boolean.TRUE);
			try { getSessionModel().send(users, documentId); }
			catch(final ParityException px) { throw new RuntimeException(px); }
			finally { toggleVisualFeedback(Boolean.FALSE); }
		}
	}
}
