create table parityArtifactState (
  artifactStateId tinyint not null,
  artifactState varchar(12) not null,
  primary key (artifactStateId),
  unique(artifactState)
);
create index parityArtifactState_artifactState on parityArtifactState(artifactState);
insert into parityArtifactState (artifactStateId, artifactState) values (0, 'ACTIVE');
insert into parityArtifactState (artifactStateId, artifactState) values (1, 'ARCHIVED');
insert into parityArtifactState (artifactStateId, artifactState) values (2, 'CLOSED');
insert into parityArtifactState (artifactStateId, artifactState) values (3, 'DELETED');

create table parityArtifact (
  artifactId bigint generated by default as identity (start with 4000),
  artifactUUID varchar(32) not null,
  artifactKeyHolder varchar(32) not null,
  artifactStateId tinyint not null,
  createdBy varchar(32) not null,
  createdOn timestamp default current_timestamp not null,
  updatedBy varchar(32) not null,
  updatedOn timestamp not null,
  primary key (artifactId),
  foreign key (artifactKeyHolder) references jiveUser(username),
  foreign key (artifactStateId) references parityArtifactState(artifactStateId),
  foreign key (createdBy) references jiveUser(username),
  foreign key (updatedBy) references jiveUser(username),
  unique (artifactUUID)
);
create index parityArtifact_artifactUUID_index on parityArtifact(artifactUUID);
create index parityArtifact_artifactKeyHolder_index on parityArtifact(artifactKeyHolder);
insert into jiveID (idType,id) values (1000, 1);

create table parityArtifactSubscription (
  artifactSubscriptionId integer not null,
  artifactId bigint not null,
  username varchar(32) not null,
  createdBy varchar(32) not null,
  createdOn timestamp default current_timestamp not null,
  updatedBy varchar(32) not null,
  updatedOn timestamp not null,
  primary key (artifactSubscriptionId),
  foreign key (artifactId) references parityArtifact(artifactId),
  foreign key (username) references jiveUser(username),
  foreign key (createdBy) references jiveUser(username),
  foreign key (updatedBy) references jiveUser(username),
  unique (artifactId, username)
);
create index parityArtifactSubscription_artifactId_index on parityArtifactSubscription(artifactId);
create index parityArtifactSubscription_username_index on parityArtifactSubscription(username);
insert into jiveID (idType,id) values (1001, 1);

create table PARITY_EVENT_QUEUE (
  USERNAME varchar(32) not null,
  EVENT_ID varchar(32) not null,
  EVENT_DATE timestamp default current_timestamp not null,
  EVENT_PRIORITY smallint not null,
  EVENT_XML varchar not null,
  primary key (EVENT_ID),
  foreign key (USERNAME) references jiveUser(USERNAME)
);

create table parityContactInvitation (
  invitationFrom varchar(32) not null,
  invitationTo varchar(32) not null,
  createdBy varchar(32) not null,
  createdOn timestamp default current_timestamp not null,
  updatedBy varchar(32) not null,
  updatedOn varchar(32) not null,
  primary key (invitationFrom,invitationTo),
  foreign key (invitationFrom) references jiveUser(username),
  foreign key (invitationTo) references jiveUser(username),
  foreign key (createdBy) references jiveUser(username),
  foreign key (updatedBy) references jiveUser(username)
);
create table parityContactEmailInvitation (
  invitationFrom varchar(32) not null,
  invitationTo varchar(32) not null,
  createdBy varchar(32) not null,
  createdOn timestamp default current_timestamp not null,
  updatedBy varchar(32) not null,
  updatedOn varchar(32) not null,
  primary key (invitationFrom,invitationTo),
  foreign key (invitationFrom) references jiveUser(username),
  foreign key (createdBy) references jiveUser(username),
  foreign key (updatedBy) references jiveUser(username)
);

create table parityContact (
  username varchar(32) not null,
  contactUsername varchar(32) not null,
  createdBy varchar(32) not null,
  createdOn timestamp default current_timestamp not null,
  updatedBy varchar(32) not null,
  updatedOn varchar(32) not null,
  primary key (username,contactUsername),
  foreign key (username) references jiveUser(username),
  foreign key (createdBy) references jiveUser(username),
  foreign key (updatedBy) references jiveUser(username)
);

create table parityUserEmail (
  username varchar(32) not null,
  email varchar not null,
  verified boolean not null,
  verificationKey varchar null,
  primary key (email),
  foreign key (username) references jiveUser(username),
  unique(email)
);

create table PARITY_USER_PROFILE (
    USERNAME varchar(32) not null,
    SECURITY_QUESTION varchar not null,
    SECURITY_ANSWER varchar not null,
    DISABLED boolean not null,
    TOKEN varchar null,
    VCARD varchar not null,
    primary key (username),
    foreign key (username) references jiveUser(username)
);

create table PARITY_USER_ARCHIVE_REL (
	USERNAME varchar(32) not null,
	ARCHIVENAME varchar(32) not null,
	primary key (USERNAME,ARCHIVENAME),
	foreign key (USERNAME) references JIVEUSER(USERNAME),
	foreign key (ARCHIVENAME) references JIVEUSER(USERNAME)
);

create table PARITY_FEATURE (
	FEATURE_ID bigint generated by default as identity (start with 1000),
	FEATURE varchar not null,
	primary key (FEATURE_ID),
	unique (FEATURE)
);

create table PARITY_USER_FEATURE_REL (
	USERNAME varchar(32) not null,
	FEATURE_ID bigint not null,
	primary key (USERNAME,FEATURE_ID),
	foreign key (USERNAME) references jiveUser(USERNAME),
	foreign key (FEATURE_ID) references PARITY_FEATURE(FEATURE_ID)
);

create table PARITY_PRODUCT (
    PRODUCT_ID bigint not null,
    PRODUCT_NAME varchar(64) not null,
    primary key(PRODUCT_ID),
    unique(PRODUCT_NAME),
    foreign key(PRODUCT_ID) references parityArtifact(artifactId)
);

create table PARITY_RELEASE (
	PRODUCT_ID bigint not null,
	RELEASE_ID bigint generated by default as identity (start with 2000),
    RELEASE_NAME varchar(64) not null,
    RELEASE_OS varchar(32) not null,
    RELEASE_DATE timestamp not null,
    primary key(RELEASE_ID),
    unique(PRODUCT_ID,RELEASE_NAME,RELEASE_OS),
    foreign key(PRODUCT_ID) references PARITY_PRODUCT(PRODUCT_ID)
);

create table PARITY_RESOURCE (
	RESOURCE_ID bigint generated by default as identity (start with 3000),
    RESOURCE_NAME varchar(64) not null,
    RESOURCE_VERSION varchar(16) not null,
    RESOURCE_CHECKSUM varchar(256) not null,
    RESOURCE_SIZE bigint not null,
	RESOURCE longvarbinary not null,
    primary key(RESOURCE_ID),
    unique(RESOURCE_NAME,RESOURCE_VERSION,RESOURCE_CHECKSUM)
);

create table PARITY_RESOURCE_OS (
	RESOURCE_ID bigint not null,
	RESOURCE_OS varchar(32) not null,
	primary key(RESOURCE_ID,RESOURCE_OS),
	foreign key(RESOURCE_ID) references PARITY_RESOURCE(RESOURCE_ID)
);

create table PARITY_RELEASE_RESOURCE_REL (
    RELEASE_ID bigint not null,
    RESOURCE_ID bigint not null,
    RESOURCE_PATH varchar(256) not null,
    primary key(RELEASE_ID,RESOURCE_ID),
    foreign key(RELEASE_ID) references PARITY_RELEASE(RELEASE_ID),
    foreign key(RESOURCE_ID) references PARITY_RESOURCE(RESOURCE_ID)
);
