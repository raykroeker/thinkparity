/*
 * Status.java
 *
 * Created on April 11, 2006, 12:22 PM
 */

package com.thinkparity.browser.application.browser.display.avatar;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import com.thinkparity.browser.application.browser.component.LabelFactory;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.State;

import com.thinkparity.codebase.assertion.Assert;

/**
 *
 * @author raykroeker@gmail.com
 * @version 1.1.0.0
 */
public class Status extends Avatar {

    /** @see java.io.Serializable */
    private static final long serialVersionUID = 1;

    /** Creates new form Status */
    public Status() {
        super("Status", ScrollPolicy.NONE, Color.WHITE);
        initComponents();

        // HACK  I know this isn't always going to be the case.
        reloadStatusMessage(Area.CONNECTION, "ConnectionOnline");
        reloadStatusMessage(Area.FILTER, "FilterOff");
    }

    /**
     * Reload a status message.
     * 
     * @param area
     *            The status area.
     * @param messageKey
     *            The message key.
     * @param messageArguments
     *            The message arguments.
     */
    public void reloadStatusMessage(final Area area, final String messageKey,
            final Object[] messageArguments) {
        switch(area) {
        case CONNECTION:
            reloadConnection(messageKey, messageArguments);
            break;
        case FILTER:
            reloadFilter(messageKey, messageArguments);
            break;
        case CUSTOM:
            reloadCustom(messageKey, messageArguments);
            break;
        default:  Assert.assertUnreachable("");
        }
    }

    /**
     * Reload a status message.
     * 
     * @param area
     *            The status area.
     * @param messageKey
     *            The message key.
     * @param messageArguments
     *            The message arguments.
     */
    public void reloadStatusMessage(final Area area, final String messageKey) {
        switch(area) {
        case CONNECTION:
            reloadConnection(messageKey);
            break;
        case FILTER:
            reloadFilter(messageKey);
            break;
        case CUSTOM:
            reloadCustom(messageKey);
            break;
        default:  Assert.assertUnreachable("");
        }
    }

    /**
     * Obtain the avatar's state information.
     * 
     * 
     * @return The avatar's state information.
     */
    public State getState() { return null; }
    
    /**
     * Set the avatar state.
     * 
     * 
     * @param state
     *            The avatar's state information.
     */
    public void setState(final State state) {}

    /**
     * Obtain the avatar id.
     * 
     * 
     * @return The avatar id.
     */
    public AvatarId getId() { return AvatarId.STATUS; }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.JSeparator jSeparator1;
        javax.swing.JSeparator jSeparator2;

        connectionJLabel = LabelFactory.create(getString("Empty"));
        jSeparator1 = new javax.swing.JSeparator();
        filterJLabel = LabelFactory.create(getString("Empty"));
        jSeparator2 = new javax.swing.JSeparator();
        customJLabel = LabelFactory.create(getString("Empty"));

        setLayout(new java.awt.GridBagLayout());
        setOpaque(false);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        add(connectionJLabel, gridBagConstraints);

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jSeparator1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        add(filterJLabel, gridBagConstraints);

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jSeparator2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        add(customJLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void reloadConnection(final String messageKey,
            final Object[] messageArguments) {
        connectionJLabel.setText(getString(messageKey, messageArguments));
    }

    private void reloadConnection(final String messageKey) {
        connectionJLabel.setText(getString(messageKey));
    }

    private void reloadCustom(final String messageKey,
            final Object[] messageArguments) {
        customJLabel.setText(getString("Custom." + messageKey, messageArguments));
    }

    private void reloadCustom(final String messageKey) {
        customJLabel.setText(getString("Custom." + messageKey));
        final javax.swing.Timer t = new javax.swing.Timer(7 * 1000, new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                customJLabel.setText(getString("Empty"));
            }
        });
        t.setRepeats(false);
        t.start();
    }
    
    private void reloadFilter(final String messageKey,
            final Object[] messageArguments) {
        filterJLabel.setText(getString(messageKey, messageArguments));
    }

    private void reloadFilter(final String messageKey) {
        filterJLabel.setText(getString(messageKey));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectionJLabel;
    private javax.swing.JLabel customJLabel;
    private javax.swing.JLabel filterJLabel;
    // End of variables declaration//GEN-END:variables

    public enum Area { CONNECTION, FILTER, CUSTOM }
}
