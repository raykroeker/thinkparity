<?xml version="1.0"?>
<project name="ophelia" default="help" basedir="."
        xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
    <property name="build.sysclasspath" value="ignore"/>

    <!-- build configuration -->
    <property environment="env"/>
    <tstamp>
        <format property="build.id" pattern="yyyy-MM-dd HH:mm:ss Z" timezone="PST"/>
    </tstamp>

    <!-- release configuration -->
    <property name="release.name" value="${ant.project.name}"/>
    <property name="release.version" value="1.0.0-RC16"/>
    <property name="release.serverhost" value="thinkparity.dyndns.org"/>

    <!-- cvs configuration -->
    <property name="cvs.compressionlevel" value="9"/>
    <property name="cvs.cvsroot" value=":pserver:tpdev.thinkparity.com:2401/home/cvs/repositories/thinkparity.com"/>
    <property name="cvs.branch" value="v1_0"/>
    <property name="cvs.modules" value="common/codebase common/junitx common/migrator common/model local/browser local/browser-plugins local/model local/thinkparity vendor/commons-codec/1.3 vendor/fop/0.20.5 vendor/hsqldb/1.8.0.2 vendor/jdic/0.9.1 vendor/i686/win32/jdic/0.9.1 vendor/junit/3.8.1 vendor/log4j/1.2.13 vendor/lucene/1.9.1 vendor/nativeskin/6.7 vendor/i686/win32/nativeskin/6.7 vendor/smack/2.2.1 vendor/smackx/2.2.1 vendor/swing-layout/1.0 vendor/xpp3/1.1.3.4.O vendor/xstream/1.1.2"/>
    <property name="cvs.modules.ide" value="ide/eclipse/product/ophelia"/>

    <!-- output directories -->
    <property name="target.dir" value="${basedir}/target"/>
    <property name="target.analyze-report.dir" value="${basedir}/target/analyze-report"/>   
    <property name="target.release.dir" value="${target.dir}/release"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.javadoc.dir" value="${target.dir}/docs/api"/>
    <property name="target.test-javadoc.dir" value="${target.dir}/test-docs/api"/>
    <property name="target.test-classes.dir" value="${target.dir}/test-classes"/>
    <property name="target.test-report.dir" value="${target.dir}/test-report"/>
    <property name="target.test-sessions.dir" value="${target.dir}/test-sessions"/>

    <!-- runtime vendor libs -->
    <fileset id="project.runtimevendorlib" dir="${basedir}/vendor">
        <include name="commons-codec/1.3/commons-codec.jar"/>
        <include name="hsqldb/1.8.0.2/hsqldb.jar"/>
        <include name="fop/0.20.5/avalon-framework-cvs-20020806.jar"/>
        <include name="fop/0.20.5/fop.jar"/>
 		<include name="fop/0.20.5/batik.jar"/>
        <include name="jdic/0.9.1/jdic.jar"/>
        <include name="log4j/1.2.13/log4j.jar"/>
        <include name="lucene/1.9.1/lucene.jar"/>
        <include name="nativeskin/6.7/nativeskin.jar"/>
        <include name="smack/2.2.1/smack.jar"/>
        <include name="smackx/2.2.1/smackx.jar"/>
        <include name="swing-layout/1.0/swing-layout.jar"/>
        <include name="xpp3/1.1.3.4.O/xpp3.jar"/>
        <include name="xstream/1.1.2/xstream.jar"/>
    </fileset>

    <!-- runtime vendor win32 libs -->
    <fileset id="project.runtimevendorlibwin32" dir="${basedir}/vendor/i686/win32">
        <include name="jdic/0.9.1/tray.dll"/>
        <include name="nativeskin/6.7/nativeskinwin32JAWT.dll"/>
    </fileset>   

    <!-- classpath -->
    <path id="project.classpath">
        <pathelement location="${target.classes.dir}"/>

        <pathelement location="${basedir}/vendor/fop/0.20.5/fop.jar"/>
        <pathelement location="${basedir}/vendor/log4j/1.2.13/log4j.jar"/>
        <pathelement location="${basedir}/vendor/xpp3/1.1.3.4.O/xpp3.jar"/>
        <pathelement location="${basedir}/vendor/xstream/1.1.2/xstream.jar"/>
        <pathelement location="${basedir}/vendor/smack/2.2.1/smack.jar"/>
        <pathelement location="${basedir}/vendor/smackx/2.2.1/smackx.jar"/>
        <pathelement location="${basedir}/vendor/lucene/1.9.1/lucene.jar"/>
        <pathelement location="${basedir}/vendor/nativeskin/6.7/nativeskin.jar"/>
        <pathelement location="${basedir}/vendor/swing-layout/1.0/swing-layout.jar"/>
        <pathelement location="${basedir}/vendor/commons-codec/1.3/commons-codec.jar"/>
        <pathelement location="${basedir}/vendor/jdic/0.9.1/jdic.jar"/>
        </path>
    <!-- test classpath -->
    <path id="project.test-classpath">
        <path refid="project.classpath"/>

        <pathelement location="${target.test-classes.dir}"/>

        <pathelement location="${basedir}/vendor/fop/0.20.5/avalon-framework-cvs-20020806.jar"/>
        <pathelement location="${basedir}/vendor/fop/0.20.5/batik.jar"/>
  		<pathelement location="${basedir}/vendor/junit/3.8.1/junit.jar"/>
        <pathelement location="${basedir}/vendor/hsqldb/1.8.0.2/hsqldb.jar"/>
    </path>

    <!-- release -->
    <target name="release">
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="test" inheritAll="true" inheritRefs="true"/>
        <antcall target="test-plugins" inheritAll="true" inheritRefs="true"/>
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile-plugins" inheritAll="true" inheritRefs="true"/>
        <antcall target="release-impl" inheritAll="true" inheritRefs="true"/>
        <antcall target="release-impl-plugins" inheritAll="true" inheritRefs="true"/>
    </target>

    <!-- release -->
    <target name="release-impl" depends="init">
        <mkdir dir="${target.release.dir}/${release.version}/core"/>
        <!-- /thinkparity.jar -->
        <jar destfile="${target.release.dir}/thinkParity.jar"
                duplicate="fail" update="false" whenempty="fail">
            <manifest>
                <attribute name="Main-Class" value="com.thinkparity.ThinkParity"/>
            </manifest>
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/"/>
                <exclude name="com/thinkparity/codebase/"/>
                <exclude name="com/thinkparity/ophelia/"/>
            </fileset>
        </jar>
        <!-- /core/codebase.jar -->
        <jar destfile="${target.release.dir}/${release.version}/core/codebase.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/codebase/"/>
            </fileset>
        </jar>
        <!-- /core/model.jar -->
        <jar destfile="${target.release.dir}/${release.version}/core/model.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/ophelia/model/"/>
                <include name="database/"/>
                <include name="localization/Model_Messages*"/>
            </fileset>
        </jar>
        <!-- /core/browser.jar -->
        <jar destfile="${target.release.dir}/${release.version}/core/browser.jar"
                duplicate="fail" update="false" whenempty="fail">
            <fileset dir="${target.classes.dir}">
                <include name="com/thinkparity/ophelia/browser/"/>
                <include name="fonts/"/>
                <include name="images/"/>
                <include name="localization/"/>
                <exclude name="localization/Model_Messages*"/>
                <include name="log4j.properties"/>
                <include name="version.properties"/>
            </fileset>
        </jar>
        <copy todir="${target.release.dir}">
            <fileset file="${basedir}/LICENSE.txt"/>
            <fileset file="${basedir}/README.txt"/>
            <fileset file="${target.classes.dir}/thinkParity.properties"/>
            <fileset file="${target.classes.dir}/install.nsi"/>
        </copy>
        <copy todir="${target.release.dir}/${release.version}">
            <fileset file="${target.classes.dir}/thinkParityImage.properties"/>
        </copy>
        <copy todir="${target.release.dir}/${release.version}/lib">
            <fileset dir="${basedir}/vendor">
                <include name="**/*.jar"/>
                <exclude name="**/*-sources.jar"/>
                <exclude name="**/*-javadoc.jar"/>
                <exclude name="**/junit.jar"/>
            </fileset>
            <mapper type="flatten"/>
        </copy>
        <copy todir="${target.release.dir}/${release.version}/lib/win32">
            <fileset dir="${basedir}/vendor">
                <include name="**/*.dll"/>
            </fileset>
            <mapper type="flatten"/>
        </copy>
        <!-- launch4j -->
        <mkdir dir="${target.release.dir}/${release.version}/lib"/>
        <property name="launch4j.install.dir" value="${env.ProgramFiles}\Launch4J"/>
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
                classpath="${launch4j.install.dir}/launch4j.jar:${launch4j.install.dir}/lib/xstream.jar"/>
        <launch4j>
            <config dontWrapJar="true" headerType="0"
                    jarPath="thinkParity.jar"
                    outfile="${target.release.dir}/thinkParity.exe"
                    errTitle="thinkParity - Error" customProcName="true"
                    stayAlive="false"
                    icon="${target.classes.dir}/images/ThinkParity32x32.ico"
                    chdir="${release.version}/lib/win32">
                    <jre minVersion="1.5.0" maxVersion="1.5.0_08"
                            args="-Dparity.install=&quot;%EXEDIR%&quot; -Dthinkparity.environment=${thinkparity.innerEnvironment}"/>
            </config>
        </launch4j>
        <!-- nsis -->
        <property name="nsis.install.dir" value="${env.ProgramFiles}\NSIS"/>
        <exec executable="${nsis.install.dir}/makensis.exe" dir="${target.release.dir}">
            <arg value="install.nsi"/>
        </exec>
        <checksum file="${target.release.dir}/thinkParity-${release.version}.exe"
            algorithm="MD5"/>
        <checksum file="${target.release.dir}/thinkParity-${release.version}.exe"
            algorithm="SHA"/>
    </target>

    <!-- release -->
    <target name="release-impl-plugins" depends="release-impl">
        <!-- archive -->
        <ant antfile="build-plugin-archive.xml" inheritall="false"
                inheritrefs="false" target="release-impl"/>
    </target>

    <!-- checkout -->
    <target name="checkout">
        <echo message="${cvs.compressionlevel}"/>
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.branch}"/>
        <echo message="${cvs.modules}"/>
        <sleep seconds="3"/>
        <!-- source trees -->
        <cvs cvsroot="${cvs.cvsroot}"
            command="checkout" compressionlevel="${cvs.compressionlevel}"
            tag="${cvs.branch}" package="${cvs.modules}" dest="${basedir}"/>
    </target>

    <!-- checkout-ide -->
    <target name="checkout-ide">
        <echo message="${cvs.compressionlevel}"/>
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.branch}"/>
        <echo message="${cvs.modules}"/>
        <echo message="${cvs.modules.ide}"/>
        <sleep seconds="3"/>
        <!-- ide files -->
        <mkdir dir="${basedir}/ide"/>
        <cvs cvsroot="${cvs.cvsroot}"
            command="export -d"
             compressionlevel="${cvs.compressionlevel}" tag="${cvs.branch}"
             package="${cvs.modules.ide}" dest="${basedir}"/>
        <move todir="${basedir}">
            <fileset dir="${basedir}/ide"/>
        </move>
    </target>

    <!-- delete output -->
    <target name="clean">
        <delete dir="${target.dir}"/>
    </target>

    <!-- compile -->
    <target name="compile" depends="init,process-resources">
        <!-- common/codebase -->
                <javac srcdir="common/codebase/src/main/java"
                destdir="${target.classes.dir}" debug="${compile.innerDebug}">
                        <classpath refid="project.classpath"/>
                </javac>
        <!-- commmon/model -->
        <javac srcdir="common/model/src/main/java"
                destdir="${target.classes.dir}" debug="${compile.innerDebug}">
                        <classpath refid="project.classpath"/>
        </javac>
        <!-- local/thinkparity -->
        <javac srcdir="local/thinkparity/src/main/java"
                destdir="${target.classes.dir}" debug="${compile.innerDebug}">
                        <classpath refid="project.classpath"/>
        </javac>
        <!-- local/model -->
        <javac srcdir="local/model/src/main/java"
                destdir="${target.classes.dir}" debug="${compile.innerDebug}">
                        <classpath refid="project.classpath"/>
        </javac>
        <!-- local/browser -->
        <javac srcdir="local/browser/src/main/java"
                destdir="${target.classes.dir}" debug="${compile.innerDebug}">
                        <classpath refid="project.classpath"/>
        </javac>
    </target>

    <!-- compile -->
    <target name="compile-plugins" depends="compile">
        <!-- archive -->
        <ant antfile="build-plugin-archive.xml" inheritall="false"
                inheritrefs="false" target="compile"/>
    </target>

    <!-- print help -->
    <target name="help">
        <echo>
Options:
    -Dthinkparity.environment=DEVELOPMENT_LOCALHOST,DEVELOPMENT_RAYMOND,  Specify the location of the environment the compiled 
                              DEVELOPMENT_ROBERT,PRODUCTION,TESTING,      executable will connect to.
                              TESTING_LOCALHOST
    -Dthinkparity.mode=DEVELOPMENT,PRODUCTION,TESTING                     Specify the mode of operation for the compiled
                                                                          executable.  This will affect the size of the compiled
                                                                          code as well

Targets:
    analyze                     Analyze the source.   
    checkout                    Checkout all source.
    checkout.ide                Checkout ide configuration files.
    clean                       Delete output.
    compile                     Compile source.
    javadoc                     Generate javadoc (html) documentation.
    process-resources           Process resources.
    tag                         Tag the release.
    test                        Run tests.
    test-compile                Compile test source.
    test-process-resources      Process test resources.
    test-report                 Produce a test report.
    update                      Update source with latest from CVS.
Examples:
    First Run:
    ant checkout test           Will grab all source from cvs; process all
                                resources; compile all code and run all tests.

    Subsequent Runs:
    ant test                    Will process all resources; compile all code; run
                                all tests.
        </echo>
    </target>

    <!-- initialize output -->
    <target name="init">
        <mkdir dir="${target.analyze-report.dir}"/>
        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.javadoc.dir}"/>
        <mkdir dir="${target.release.dir}"/>
        <mkdir dir="${target.test-javadoc.dir}"/>
                <mkdir dir="${target.test-classes.dir}"/>
                <mkdir dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-sessions.dir}"/>


        <condition property="thinkparity.innerEnvironment" value="${thinkparity.environment}"
                else="PRODUCTION">
            <isset property="thinkparity.environment"/>
        </condition>
        <!-- if the thinkparity.mode property is not set use DEBUG as a default
            otherwise use the value itself -->
        <condition property="thinkparity.innerMode" value="${thinkparity.mode}"
                else="DEVELOPMENT">
            <isset property="thinkparity.mode"/>
        </condition>
        <!-- set the compile.debug flag based upon the mode; production implies
            false testing and development imply true -->
        <condition property="compile.innerDebug" value="true" else="false">
            <or>
                <equals arg1="DEVELOPMENT" arg2="${thinkparity.innerMode}"/>
                <equals arg1="TESTING" arg2="${thinkparity.innerMode}"/>
            </or>
        </condition>
        <echo>Build Configuration:
    thinkparity.environment:  ${thinkparity.innerEnvironment}  [DEVELOPMENT_LOCALHOST,DEVELOPMENT_RAYMOND,DEVELOPMENT_ROBERT,PRODUCTION,TESTING,TESTING_LOCALHOST]
    thinkparity.mode:         ${thinkparity.innerMode}  [DEVELOPMENT,PRODUCTION,TESTING]
    compile.debug:            ${compile.innerDebug}  [true,false]</echo>
        <sleep seconds="3"/>
    </target>

    <!-- analyze the source -->
    <target name="analyze" depends="init">
        <cs:checkstyle config="checkstyle-rules.xml"
            failureProperty="checkstyle.didFail" failOnViolation="false">
            <formatter type="xml" tofile="target/analyze-report/checkstyle.xml"/>
            <!-- common/codebase -->   
            <fileset dir="common/codebase/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- common/junitx -->   
            <fileset dir="common/junitx/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- common/model -->   
            <fileset dir="common/model/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- local/model -->   
            <fileset dir="local/browser/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- local/model -->   
            <fileset dir="local/model/src/main/java">
                <include name="**/*.java"/>
            </fileset>
            <!-- local/thinkparity -->   
            <fileset dir="local/thinkparity/src/main/java">
                <include name="**/*.java"/>
            </fileset>
        </cs:checkstyle>
        <style in="target/analyze-report/checkstyle.xml"
                out="target/analyze-report/index.html"
                style="checkstyle-format.xsl"/>
    </target>

    <!-- document the source -->
    <target name="javadoc">
        <javadoc access="private" classpathref="project.classpath"
                destdir="${target.javadoc.dir}"
                doctitle="thinkParity"
                group="thinkParity Codebase com.thinkparity.codebase*,thinkParity Model com.thinkparity.ophelia.model*,thinkParity Browser com.thinkparity.ophelia.browser*,thinkParity Bootstrap com.thinkparity.*"
                packagenames="com.thinkparity.*"
                sourcepath="${basedir}/common/codebase/src/main/java:${basedir}/common/model/src/main/java:${basedir}/local/model/src/main/java:${basedir}/local/browser/src/main/java:${basedir}/local/browser-plugins/archive/main/java:${basedir}/local/thinkparity/src/main/java">
            <group packages="com.thinkparity*" title="thinkParity Bootstrap"/>
            <group packages="com.thinkparity.codebase*" title="thinkParity Codebase"/>
            <group packages="com.thinkparity.ophelia.model*" title="thinkParity Model"/>
            <group packages="com.thinkparity.ophelia.browser*" title="thinkParity Browser"/>
            <group packages="com.thinkparity.ophelia.browser.plugin*" title="thinkParity Browser Plugins"/>
        </javadoc>
    </target>

    <!-- document the test source -->
    <target name="test-javadoc">
        <javadoc access="private" classpathref="project.classpath"
                destdir="${target.test-javadoc.dir}"
                doctitle="thinkParity"
                group="thinkParity Codebase com.thinkparity.codebase*,thinkParity Model com.thinkparity.ophelia.model*,thinkParity Browser com.thinkparity.ophelia.browser*,thinkParity Bootstrap com.thinkparity.*"
                packagenames="com.thinkparity.*"
                sourcepath="${basedir}/common/codebase/src/test/java:${basedir}/common/model/src/test/java:${basedir}/local/model/src/test/java:${basedir}/local/browser/src/test/java">
            <group packages="com.thinkparity*" title="thinkParity Bootstrap"/>
            <group packages="com.thinkparity.codebase*" title="thinkParity Codebase"/>
            <group packages="com.thinkparity.ophelia.model*" title="thinkParity Model"/>
            <group packages="com.thinkparity.ophelia.browser*" title="thinkParity Browser"/>
            <group packages="com.thinkparity.ophelia.browser.plugin*" title="thinkParity Browser Plugins"/>
        </javadoc>
    </target>

    <!-- process resources -->
    <target name="process-resources" depends="init">
        <copy todir="${target.classes.dir}">
            <fileset dir="${basedir}/common/codebase/src/main/resources"/>
            <fileset dir="${basedir}/local/browser/src/main/resources"/>
            <fileset dir="${basedir}/local/model/src/main/resources"/>
        </copy>
        <copy todir="${target.classes.dir}">
            <fileset dir="${basedir}/local/browser/src/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="pom.version" value="${release.version}"/>
                <filter token="com.thinkparity.parity.buildId" value="${build.id}"/>
                <filter token="com.thinkparity.parity.mode" value="${thinkparity.innerMode}"/>
                <filtersfile file="${basedir}/build.filters"/>
                <filtersfile file="${basedir}/local/browser/build.filters"/>
            </filterset>
        </copy>
    </target>

    <!-- tag cvs -->
    <target name="tag">
        <input addproperty="cvs.tag" message="Release tag (REL_vX_X[_RCX]:"/>
        <echo message="${cvs.tag}"/>
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.tag}"/>
        <cvs cvsroot="${cvs.cvsroot}"
            command="tag -c -F -R ${cvs.tag} .cvsignore build.filters build.xml LICENSE.txt README.txt ${cvs.modules}"/>
    </target>

    <!-- unit test -->
    <target name="test" depends="test-compile">
        <!-- if junitx.log4j.* is not set; use defaults; otherwise use the
            values themselves -->
        <condition property="inner.junitx.log4j.level"
                value="${junitx.log4j.level}" else="INFO">
            <isset property="junitx.log4j.level"/>
        </condition>
        <condition property="inner.junitx.log4j.console"
                value="${junitx.log4j.console}" else="false">
            <isset property="junitx.log4j.console"/>
        </condition>
        <condition property="inner.test"
                value="**/${test}Test.class" else="**/*Test.class">
            <isset property="test"/>
        </condition>

        <junit fork="on" forkmode="once" reloading="false"
                        errorproperty="junit.didError" failureproperty="junit.didFail">
            <jvmarg value="-Djunitx.log4j.level=${inner.junitx.log4j.level}"/>
            <jvmarg value="-Djunitx.log4j.console=${inner.junitx.log4j.console}"/>

                        <classpath refid="project.test-classpath"/>
                        <formatter type="brief" usefile="false"/>

                    <!-- execute batch tests -->
                    <batchtest todir="${target.test-sessions.dir}">
                <formatter type="xml"/>
                <fileset dir="${target.test-classes.dir}" includes="${inner.test}"/>
                        </batchtest>
                </junit>
        <antcall target="test-report" inheritRefs="true" inheritAll="true"/>

        <fail message="JUnit failure." if="junit.didFail"/>
        <fail message="JUnit error." if="junit.didError"/>
    </target>

    <!-- unit test report -->
    <target name="test-report">
        <delete dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <junitreport todir="${target.test-report.dir}">
            <fileset dir="${target.test-sessions.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report styledir="${basedir}" format="noframes" todir="${target.test-report.dir}"/>
        </junitreport>
    </target>

    <!-- compile tests -->
    <target name="test-compile" depends="compile,test-process-resources">
        <!-- common/junitx -->
        <javac srcdir="common/junitx/src/main/java"
                destdir="${target.test-classes.dir}" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
        <!-- common/codebase -->
        <javac srcdir="common/codebase/src/test/java"
                destdir="${target.test-classes.dir}" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
        <!-- common/model -->
        <javac srcdir="common/model/src/test/java"
                destdir="${target.test-classes.dir}" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
        <!-- local/model -->
        <javac srcdir="local/model/src/test/java"
                destdir="${target.test-classes.dir}" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
        <!-- local/browser -->
        <javac srcdir="local/browser/src/test/java"
                destdir="${target.test-classes.dir}" debug="${compile.innerDebug}">
            <classpath refid="project.test-classpath"/>
        </javac>
    </target>

    <!-- process test resources -->
    <target name="test-process-resources" depends="init">
        <copy todir="${target.test-classes.dir}">
            <fileset dir="${basedir}/common/junitx/src/main/resources"/>
            <fileset dir="${basedir}/local/model/src/test/resources"/>
        </copy>
    </target>

    <!-- quick release -->
    <target name="quick-release">
        <antcall target="clean" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile" inheritAll="true" inheritRefs="true"/>
        <antcall target="compile-plugins" inheritAll="true" inheritRefs="true"/>
        <antcall target="release-impl" inheritAll="true" inheritRefs="true"/>
        <antcall target="release-impl-plugins" inheritAll="true" inheritRefs="true"/>
    </target>
</project>