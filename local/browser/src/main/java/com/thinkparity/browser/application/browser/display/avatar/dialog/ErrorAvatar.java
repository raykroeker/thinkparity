/*
 * ErrorDialog.java
 *
 * Created on July 21, 2006, 12:08 PM
 */

package com.thinkparity.browser.application.browser.display.avatar.dialog;

import java.awt.event.ActionEvent;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.swing.AbstractAction;

import com.thinkparity.browser.application.browser.BrowserConstants;
import com.thinkparity.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.browser.platform.action.Data;
import com.thinkparity.browser.platform.application.display.avatar.Avatar;
import com.thinkparity.browser.platform.util.State;

/**
 *
 * @author rob_masako@shaw.ca; raymond@thinkparity.com
 */
public class ErrorAvatar extends Avatar {
    
    /** @see java.io.Serializable */
    private static final long serialVersionUID = 1;
    
    /** Creates new form ErrorDialog */
    public ErrorAvatar() {
        super("ErrorDialog", BrowserConstants.DIALOGUE_BACKGROUND);
        bindEscapeKey("Cancel", new AbstractAction() {
            /** @see java.io.Serializable */
            private static final long serialVersionUID = 1;

            /**
             * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
             */
            public void actionPerformed(final ActionEvent e) {
                disposeWindow();
            }
        });
        initComponents();
    }

    public AvatarId getId() { return AvatarId.DIALOG_ERROR; }

    public State getState() { return null; }

    /**
     * @see com.thinkparity.browser.platform.application.display.avatar.Avatar#reload()
     * 
     */
    public void reload() {
        reloadErrorMessage();
        reloadError();
    }

    public void setState(final State state) {}

    private void closeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJButtonActionPerformed
        disposeWindow();
    }//GEN-LAST:event_closeJButtonActionPerformed

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JButton closeJButton;
        javax.swing.JScrollPane errorJScrollPane;

        closeJButton = new javax.swing.JButton();
        errorMessageJLabel = new javax.swing.JLabel();
        errorJScrollPane = new javax.swing.JScrollPane();
        errorJTextArea = new javax.swing.JTextArea();

        closeJButton.setText(java.util.ResourceBundle.getBundle("com/thinkparity/browser/platform/util/l10n/JPanel_Messages").getString("ErrorDialog.Ok"));
        closeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                closeJButtonActionPerformed(e);
            }
        });

        errorJTextArea.setColumns(20);
        errorJTextArea.setRows(5);
        errorJScrollPane.setViewportView(errorJTextArea);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(errorJScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(errorMessageJLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap(303, Short.MAX_VALUE)
                        .add(closeJButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(errorMessageJLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(errorJScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(closeJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Read the input error.
     * 
     * @return An error string.
     */
    private String readInputError() {
        if(null == input) { return null; }
        else {
            final Throwable t = (Throwable) ((Data) input).get(DataKey.ERROR);
            if (null == t) {
                return null;
            } else {
                final StringWriter sw = new StringWriter();
                t.printStackTrace(new PrintWriter(sw));
                return sw.toString();
            }
        }
    }

    /**
     * Read the error message key from the input.
     * 
     * @return An error message key.
     */
    private Object[] readInputErrorMessageArguments() {
        if (null == input) {
            return null;
        } else {
            return (Object[]) ((Data) input).get(DataKey.ERROR_MESSAGE_ARGUMENTS);
        }
    }

    /**
     * Read the error message key from the input.
     * 
     * @return An error message key.
     */
    private String readInputErrorMessageKey() {
        if(null == input) { return null; }
        else { return (String) ((Data) input).get(DataKey.ERROR_MESSAGE_KEY); }
    }

    /**
     * Reload the error text area.
     *
     */
    private void reloadError() {
        errorJTextArea.setText("");
        final String error = readInputError();
        if(null != error) { errorJTextArea.setText(error); }
    }
    /**
     * Reload the error message label.
     *
     */
    private void reloadErrorMessage() {
        errorMessageJLabel.setText("");
        final String errorMessageKey = readInputErrorMessageKey();
        final Object[] errorMessageArguments = readInputErrorMessageArguments();
        if(null != errorMessageKey) {
            if(null != errorMessageArguments) {
                errorMessageJLabel.setText(getString(errorMessageKey, errorMessageArguments));
            }
            else {
                errorMessageJLabel.setText(getString(errorMessageKey));
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea errorJTextArea;
    private javax.swing.JLabel errorMessageJLabel;
    // End of variables declaration//GEN-END:variables

    /** Data keys. */
    public enum DataKey { ERROR, ERROR_MESSAGE_ARGUMENTS, ERROR_MESSAGE_KEY }   
}
