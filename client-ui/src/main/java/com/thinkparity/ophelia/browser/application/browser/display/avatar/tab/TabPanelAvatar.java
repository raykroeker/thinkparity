/*
 * Created On: October 6, 2006, 1:42 PM
 */
package com.thinkparity.ophelia.browser.application.browser.display.avatar.tab;

import com.thinkparity.codebase.swing.border.BottomBorder;
import com.thinkparity.ophelia.browser.application.browser.BrowserConstants.Colours;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.event.MouseEvent;

import javax.swing.DefaultListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

import com.thinkparity.ophelia.browser.application.browser.display.avatar.AvatarId;
import com.thinkparity.ophelia.browser.application.browser.display.avatar.Resizer;
import com.thinkparity.ophelia.browser.application.browser.display.avatar.Resizer.ResizeEdges;
import com.thinkparity.ophelia.browser.application.browser.display.renderer.tab.DefaultTabPanel;

/**
 *
 * @author raymond@thinkparity.com
 * @version 1.1.2.1
 */
public abstract class TabPanelAvatar<T extends TabModel> extends TabAvatar<T> {

    /** The filler constraints. */
    private final GridBagConstraints fillConstraints;

    /** The panel constraints. */
    private final GridBagConstraints panelConstraints;

    /** Creates new form TabPanelAvatar */
    public TabPanelAvatar(final AvatarId id, final T model) {
    	super(id, model);
        this.fillConstraints = new GridBagConstraints();
        this.fillConstraints.fill = GridBagConstraints.HORIZONTAL;
        this.fillConstraints.weightx = 1.0F;
        this.fillConstraints.weighty = 1.0F;
        this.fillConstraints.gridx = 0;
        this.fillConstraints.gridy = GridBagConstraints.RELATIVE;
        this.panelConstraints = new GridBagConstraints();
        this.panelConstraints.fill = GridBagConstraints.BOTH;
        this.panelConstraints.gridx = 0;
    	installDataListener();
        initComponents();
        installResizer();
        //new CursorMovementCustodian().applyCursorKeyListener(this);
    }

    /**
	 * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#reload()
	 */
    @Override
	public void reload() {
    	super.reload();
    }
    
    /**
     * @see com.thinkparity.ophelia.browser.platform.application.display.avatar.Avatar#getResizeEdges()
     */
    @Override
    protected ResizeEdges getResizeEdges() {
        return Resizer.ResizeEdges.MIDDLE;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        headerJLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tabJScrollPane = new javax.swing.JScrollPane();
        tabJPanel = new javax.swing.JPanel();
        fillJLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        headerJLabel.setText(" ");
        headerJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                headerJLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                headerJLabelMouseReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        add(headerJLabel, gridBagConstraints);

        jPanel1.setBorder(new BottomBorder(Colours.MAIN_CELL_DEFAULT_BORDER));
        jPanel1.setOpaque(false);
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Star");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Updated On");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Draft");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .add(157, 157, 157)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2)))
            .add(jPanel1Layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel1, gridBagConstraints);

        tabJScrollPane.setBorder(null);
        tabJScrollPane.setPreferredSize(new java.awt.Dimension(256, 128));
        tabJPanel.setLayout(new java.awt.GridBagLayout());

        tabJPanel.setBackground(new java.awt.Color(255, 255, 255));
        tabJPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabJPanelMouseReleased(evt);
            }
        });

        tabJPanel.add(fillJLabel, new java.awt.GridBagConstraints());

        tabJScrollPane.setViewportView(tabJPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        add(tabJScrollPane, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void tabJPanelMouseReleased(java.awt.event.MouseEvent e) {// GEN-FIRST:event_tabJPanelMouseReleased
        if (e.isPopupTrigger()) {
            triggerPopup(tabJPanel, e);
        }
    }// GEN-LAST:event_tabJPanelMouseReleased

    private void headerJLabelMouseReleased(java.awt.event.MouseEvent e) {// GEN-FIRST:event_headerJLabelMouseReleased
        if (e.isPopupTrigger()) {
            triggerPopup(tabJPanel, e);
        }
    }// GEN-LAST:event_headerJLabelMouseReleased

    private void headerJLabelMousePressed(java.awt.event.MouseEvent e) {// GEN-FIRST:event_headerJLabelMousePressed
    }// GEN-LAST:event_headerJLabelMousePressed

    /**
     * Install the a data listener on the list model. This will translate the
     * model's data events into UI component events.
     * 
     */
    private void installDataListener() {
        final DefaultListModel listModel = model.getListModel();
        listModel.addListDataListener(new ListDataListener() {
            public void contentsChanged(final ListDataEvent e) {
                debug();

                // update from index 0 to index 1
                for (int i = e.getIndex0(); i <= e.getIndex1(); i++) {
                    panelConstraints.gridy = i;
                    tabJPanel.remove(i);
                    final DefaultTabPanel panel = (DefaultTabPanel) listModel.get(i);
                    panel.setPreferredSize(panel.getPreferredSize(i==(listModel.size()-1)));
                    panel.prepareForRepaint();
                    panel.setBackground(panel.getBackgroundColor());
                    panel.setBorder(panel.getBorder(i==(listModel.size()-1)));
                    tabJPanel.add(panel, panelConstraints.clone(), i);
                }
                
                tabJPanel.revalidate();
                tabJPanel.repaint();
                tabJScrollPane.revalidate();
                tabJScrollPane.repaint();
                validate();
                
                for (int i = e.getIndex0(); i <= e.getIndex1(); i++) {
                    final DefaultTabPanel panel = (DefaultTabPanel) listModel.get(i);
                    panel.prepareForRepaintAfterValidate();
                }
                
                repaint();
                debug();
            }
            
            public void intervalAdded(final ListDataEvent e) {
                debug();

                tabJPanel.remove(fillJLabel);
                
                // Adding an interval can cause the border on the interval before it to change,
                // so adjust the start index to one before the interval added.
                int startIndex = e.getIndex0();
                if (startIndex > 0) {
                    startIndex--;
                }

                // refresh the element at index 0 and the elements after index 0
                for (int i = startIndex; i < listModel.size(); i++) {
                    panelConstraints.gridy = i;
                    final DefaultTabPanel panel = (DefaultTabPanel) listModel.get(i);
                    panel.setPreferredSize(panel.getPreferredSize(i==(listModel.size()-1)));
                    panel.prepareForRepaint();
                    panel.setBackground(panel.getBackgroundColor());
                    panel.setBorder(panel.getBorder(i==(listModel.size()-1)));
                    tabJPanel.add(panel, panelConstraints.clone(), i);
                }

                tabJPanel.add(fillJLabel, fillConstraints, listModel.size());
 
                tabJPanel.revalidate();
                tabJPanel.repaint();
                tabJScrollPane.revalidate();
                tabJScrollPane.repaint();
                
                // Use validate() so everything is laid out immediately.
                validate();
                
                // Loop over elements one more time. Some things can only be done
                // after everything is laid out, for example, set the split pane
                // divider location.
                for (int i = startIndex; i < listModel.size(); i++) {
                    final DefaultTabPanel panel = (DefaultTabPanel) listModel.get(i);
                    panel.prepareForRepaintAfterValidate();
                }
                
                repaint();
                debug();
            }
            
            public void intervalRemoved(final ListDataEvent e) {
                debug();

                tabJPanel.remove(fillJLabel);
                
                // Removing an interval can cause the border on the interval before it to change,
                // so adjust the start index to one before the interval added.
                int startIndex = e.getIndex0();
                if (startIndex > 0) {
                    startIndex--;
                }

                // remove index 0
                tabJPanel.remove(e.getIndex0());

                // refresh from index 0 forward
                for (int i = startIndex; i < listModel.size(); i++) {
                    panelConstraints.gridy = i;
                    final DefaultTabPanel panel = (DefaultTabPanel) listModel.get(i);
                    panel.setPreferredSize(panel.getPreferredSize(i==(listModel.size()-1)));
                    panel.prepareForRepaint();
                    panel.setBackground(panel.getBackgroundColor());
                    panel.setBorder(panel.getBorder(i==(listModel.size()-1)));
                    tabJPanel.add(panel, panelConstraints.clone(), i);
                }

                tabJPanel.add(fillJLabel, fillConstraints, listModel.size());

                tabJPanel.revalidate();
                tabJPanel.repaint();
                tabJScrollPane.revalidate();
                tabJScrollPane.repaint();
                validate();
                
                for (int i = startIndex; i < listModel.size(); i++) {
                    final DefaultTabPanel panel = (DefaultTabPanel) listModel.get(i);
                    panel.prepareForRepaintAfterValidate();
                }
                
                repaint();
                debug();
            } 
        });
    }
    
    /**
     * Trigger a popup for the tab avatar.
     *
     */
    protected void triggerPopup(final Component invoker, final MouseEvent e) {}

    /**
     * @see com.thinkparity.codebase.swing.AbstractJPanel#debug()
     */
    @Override
    public void debug() {
        final Component[] components = tabJPanel.getComponents();
        logger.logDebug("{0} components.", components.length);
        for (final Component component : components) {
            logger.logVariable("component", component);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fillJLabel;
    private javax.swing.JLabel headerJLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel tabJPanel;
    private javax.swing.JScrollPane tabJScrollPane;
    // End of variables declaration//GEN-END:variables
}
