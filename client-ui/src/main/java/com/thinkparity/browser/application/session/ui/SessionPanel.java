/*
 * Feb 3, 2006
 */
package com.thinkparity.browser.application.session.ui;

import java.awt.Color;

import javax.swing.SwingUtilities;

import com.thinkparity.browser.application.session.ui.SessionWindow.ReturnCode;
import com.thinkparity.browser.javax.swing.AbstractJPanel;
import com.thinkparity.browser.platform.util.SwingUtil;

/**
 * @author raykroeker@gmail.com
 * @version 1.1
 */
public class SessionPanel extends AbstractJPanel {

	/**
	 * @see java.io.Serializable
	 * 
	 */
	private static final long serialVersionUID = 1;

	// Variables declaration - do not modify
    private javax.swing.JButton cancelJButton;

	private javax.swing.JButton loginJButton;

	/**
     * The password.
     * 
     */
    private String password;

	private javax.swing.JLabel passwordJLabel;

	private javax.swing.JPasswordField passwordJPasswordField;

    /**
     * The remember password setting.
     * 
     */
    private Boolean rememberPassword;

    private javax.swing.JCheckBox rememberPasswordJCheckBox;

    /**
     * The form's return code.
     * 
     */
    private ReturnCode returnCode;

    private javax.swing.JLabel serverJLabel;

    /**
     * The username.
     * 
     */
    private String username;

    private javax.swing.JLabel usernameJLabel;

    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration

    /**
	 * Create a SessionPanel.
	 * 
	 * @param l18nContext
	 *            The localization context.
	 */
	public SessionPanel(final String l18nContext) { this(l18nContext, null); }

    /**
	 * Create a SessionPanel.
	 * 
	 * @param l18nContext
	 *            The localization context.
	 * @param background
	 *            The panel background.
	 */
	public SessionPanel(final String l18nContext, final Color background) {
		super(l18nContext, background);
		initComponents();
	}

    /**
	 * Obtain the remember password setting.
	 * 
	 * @return The remember password setting.
	 */
    public Boolean doRememberPassword() { return rememberPassword; }


    public Boolean extractDoRememberPassword() {
		return rememberPasswordJCheckBox.isSelected();
	}
    public String extractPassword() {
		return SwingUtil.extract(passwordJPasswordField);
	}
    public String extractUsername() {
		return SwingUtil.extract(usernameJTextField);
	}
    /**
	 * Obtain the password.
	 * 
	 * @return The password.
	 */
    public String getPassword() { return password; }
    /**
	 * Get the username.
	 * 
	 * @return The username.
	 */
    public String getUsername() { return username; }
    /**
     * Obtain the return code.
     */
    ReturnCode getReturnCode() { return returnCode; }
    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	username = null;
    	password = null;
    	rememberPassword = null;
    	setWindowVisible(false, ReturnCode.CANCEL);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        usernameJLabel = new javax.swing.JLabel();
        passwordJLabel = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        passwordJPasswordField = new javax.swing.JPasswordField();
        rememberPasswordJCheckBox = new javax.swing.JCheckBox();
        serverJLabel = new javax.swing.JLabel();
        cancelJButton = new javax.swing.JButton();
        loginJButton = new javax.swing.JButton();
        loginJButton.requestFocus();

        usernameJLabel.setText("Username:");

        passwordJLabel.setText("Password:");

        rememberPasswordJCheckBox.setText("Remember password");
        rememberPasswordJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rememberPasswordJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        cancelJButton.setText("Cancel");
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        loginJButton.setText("Login");
        loginJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginJButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(usernameJLabel)
                            .add(passwordJLabel))
                        .add(14, 14, 14)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(passwordJPasswordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .add(usernameJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .add(rememberPasswordJCheckBox)))
                    .add(layout.createSequentialGroup()
                        .add(serverJLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 195, Short.MAX_VALUE)
                        .add(loginJButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelJButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(usernameJLabel)
                    .add(usernameJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(passwordJLabel)
                    .add(passwordJPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(rememberPasswordJCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(serverJLabel)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cancelJButton)
                        .add(loginJButton)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void loginJButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	username = SwingUtil.extract(usernameJTextField);
    	password = SwingUtil.extract(passwordJPasswordField);
    	rememberPassword = SwingUtil.extract(rememberPasswordJCheckBox);
    	if(isInputValid()) { setWindowVisible(false, ReturnCode.LOGIN); }
    }
   
    /**
	 * @see com.thinkparity.browser.javax.swing.AbstractJPanel#isInputValid()
	 * 
	 */
	public Boolean isInputValid() {
		return null != username
			&& 0 < username.length()
			&& null != password
			&& 0 < password.length();
	}

	private void setWindowVisible(final Boolean b, final ReturnCode returnCode) {
    	this.returnCode = returnCode;
    	if(!b)
    		SwingUtilities.getWindowAncestor(this).dispose();
    }
}
