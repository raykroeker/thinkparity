<?xml version="1.0"?>
<project name="desdemona" default="help" basedir="."
        xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
        xmlns:antx="antlib:com.thinkparity.antx">
    <property name="build.sysclasspath" value="ignore"/>

    <!-- build configuration -->
    <property environment="env"/>
    <tstamp>
        <format property="thinkparity.build-id" pattern="yyyyMMddHHmmssZ" timezone="PST"/>
    </tstamp>
    <property name="javac.compilerargs" value="-Xlint:deprecation -Xlint:unchecked"/>
    <property name="javac.debug" value="true"/>
    <property name="javac.debug-level" value="lines,vars,source"/>
    <property name="java.jvmarg-debug" value="-Xdebug -Xint -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"/>

    <!-- local configuration  -->
    <property name="localconfig" value="local.properties"/>
    <property file="${localconfig}"/>
    <fail>
        <condition>
            <not>
                <contains string="${ant.version}" substring="1.7.0"/>
            </not>
        </condition>
Please install version 1.7.0 of ant.
http://ant.apache.org
    </fail>
    <fail>
        <condition>
            <not>
                <available file="${localconfig}"/>
            </not>
        </condition>
Local configuration ${localconfig} does not exist.  Please create:
    antx.vendor-dir             Ant eXtensions Vendor Directory   
    scm.credentials             Source control credentials.     username:password
    wildfire.home               Wildfire Runtime
    thinkparity.environment     Environment                     com.thinkparity.codebase.model.session.Environment
    thinkparity.mode            Mode                            com.thinkparity.codebase.Mode
    thinkparity.os              Operating System                com.thinkparity.codebase.OS
    thinkparity.os-platform     Operating System Platform       com.thinkparity.codebase.Platform
    thinkparity.product-name    Product Name
    thinkparity.release-name    Release Name
    </fail>
    <fail>
        <condition>
            <not>
                <and>
                    <isset property="scm.credentials"/>
                    <isset property="wildfire.home"/>   
                    <isset property="thinkparity.environment"/>
                    <isset property="thinkparity.os"/>
                    <isset property="thinkparity.os-platform"/>
                    <isset property="thinkparity.product-name"/>
                    <isset property="thinkparity.release-name"/>
                </and>
            </not>
        </condition>
Local configuration ${localconfig} is incomplete.  Please specify:
    antx.vendor-dir                 ${antx.vendor-dir}
    scm.credentials                 XXXXXXXXXXXXXXXXXXXXXXXXXX
    wildfire.home                   ${wildfire.home}   
    thinkparity.environment         ${thinkparity.environment}
    thinkparity.mode                ${thinkparity.mode}
    thinkparity.os                  ${thinkparity.os}
    thinkparity.os-platform         ${thinkparity.os-platform}
    thinkparity.product-name        ${thinkparity.product-name}
    thinkparity.release-name        ${thinkparity.release-name}
    </fail>
    <echo>
Environment Configuration:
    Groovy Home:                    ${env.GROOVY_HOME}
    Launch4J Home:                  ${env.LAUNCH4J_HOME}
    NSIS Home:                      ${env.NSIS_HOME}
Build Configuration:
    Build Id:                       ${thinkparity.build-id}
    Compiler Arguments:             ${javac.compilerargs}
    Compiler Debugging:             ${javac.debug} ${javac.debug-level}
    Java JVM Debug:                 ${java.jvmarg-debug}
Local Configuration:                ${localconfig}
    Ant eXtensions Vendor Directory ${antx.vendor-dir}   
    Source Control Credentials:     XXXXXXXXXXXXXXXXXXXXXXXXXX
    Environment:                    ${thinkparity.environment}
    Mode:                           ${thinkparity.mode}
    Operating System:               ${thinkparity.os}
    Operating System Platform:      ${thinkparity.os-platform}
    Product Name:                   ${thinkparity.product-name}
    Release Name:                   ${thinkparity.release-name}
    </echo>

    <!-- cvs configuration -->
    <property name="cvs.compressionlevel" value="9"/>
    <property name="cvs.cvsroot" value=":pserver:${scm.credentials}@tpdev.thinkparity.com:2401/home/cvs/repositories/thinkparity.com"/>
    <property name="cvs.branch" value="v1_0"/>
    <property name="cvs.modules" value="remote/codebase remote/model"/>

    <!-- groovy configuration -->
    <path id="groovy.classpath">
        <pathelement location="${env.GROOVY_HOME}/lib/groovy-1.0.jar"/>
        <pathelement location="${env.GROOVY_HOME}/lib/antlr-2.7.5.jar"/>
        <pathelement location="${env.GROOVY_HOME}/lib/asm-2.2.jar"/>
        <pathelement location="${basedir}/remote/model/src/main/groovy"/>
        <path refid="runtime.classpath"/>
    </path>

    <!-- input directories -->
    <property name="thinkparity.common.home" value="${basedir}/../common"/>

    <!-- output directories -->
    <property name="target.dir" value="${basedir}/target"/>
    <property name="target.analyze-report.dir" value="${basedir}/target/analyze-report"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.generate-classes.dir" value="${target.dir}/generate-classes"/>
    <property name="target.javadoc.dir" value="${target.dir}/docs/api"/>
    <property name="target.package.dir" value="${target.dir}/package"/>   
    <property name="target.test-classes.dir" value="${target.dir}/test-classes"/>
    <property name="target.test-javadoc.dir" value="${target.dir}/test-docs/api"/>   
    <property name="target.test-report.dir" value="${target.dir}/test-report"/>
    <property name="target.test-sessions.dir" value="${target.dir}/test-sessions"/>

    <!-- compile dependencies -->
    <antx:dependency type="java" scope="compile" provider="apache.org"
        version="0.20.5" path="fop/0.20.5/avalon-framework-cvs-20020806.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org"
        version="0.20.5" path="fop/0.20.5/fop.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org"
        version="1.9.1" path="lucene/1.9.1/lucene.jar"/>
    <antx:dependency type="java" scope="compile" provider="apache.org"
        version="1.2.13" path="log4j/1.2.13/log4j.jar"/>
    <antx:dependency type="java" scope="compile" provider="codehaus.org"
        version="1.0" path="groovy/1.0/groovy.jar"/>
    <antx:dependency type="java" scope="compile" provider="codehaus.org"
        version="1.2.1" path="xstream/1.2.1/xstream.jar"/>
    <antx:dependency type="java" scope="compile" provider="jivesoftware.org"
        version="2.2.1" path="smack/2.2.1/smack.jar"/>
    <antx:dependency type="java" scope="compile" provider="jivesoftware.org"
        version="3.0.1" path="wildfire/3.0.1/wildfire.jar"/>
    <antx:dependency type="java" scope="compile" provider="jivesoftware.org"
        version="3.0.1" path="wildfire/3.0.1/mail.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org"
        version="2.0.10" path="jotm/2.0.10/jta-spec1_0_1.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org"
        version="2.0.10" path="jotm/2.0.10/jotm.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org"
        version="2.0.10" path="jotm/2.0.10/xapool.jar"/>
    <antx:dependency type="java" scope="compile" provider="objectweb.org"
        version="2.0.10" path="jotm/2.0.10/ow_carol.jar"/>

    <!-- runtime dependencies -->
    <antx:dependency type="java" scope="runtime" provider="apache.org" version="10.2.2.0"
        path="apache.org/derby/10.2.2.0/derby.jar"/>
    <antx:dependency type="java" scope="runtime" provider="apache.org"
        version="0.20.5" path="fop/0.20.5/batik.jar"/>
    <antx:dependency type="java" scope="compile" provider="jivesoftware.org"
        version="2.2.1" path="smackx/2.2.1/smackx.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/jotm_jrmp_stubs.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/commons-logging.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/connector-1_5.jar"/>
    <antx:dependency type="java" scope="runtime" provider="objectweb.org" version="2.0.10"
        path="jotm/2.0.10/howl.jar"/>

    <!-- test dependencies -->
    <antx:dependency type="java" scope="test" provider="junit.org" version="3.8.1"
        path="junit/3.8.1/junit.jar"/>

    <!-- xdoclet configuration -->
    <path id="xdoclet.classpath">
        <pathelement location="${target.generate-classes.dir}"/>

        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-beanutils-1.7.0.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-collections-3.1.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-jelly-20050813.225330.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-jelly-tags-define-1.0.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-jelly-tags-jsl-1.0.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-jelly-tags-xml-20050823.222913.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-jexl-1.0.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/commons-logging-1.0.4.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/dom4j-1.6.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/generama-1.2.1.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/jaxen-1.1-beta-4.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/log4j-1.2.13.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/nanocontainer-1.0-beta-3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/nanocontainer-ant-1.0-beta-3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/picocontainer-1.0.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/qdox-20051211.114207.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/saxpath-1.0-FCS.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/velocity-1.4.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/xdoclet-2.0.4.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/xerces-2.4.0.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-actionscript-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-beaninfo-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-castor-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-ejb-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-externalizer-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-hibernate-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-interfaceextractor-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-jdo-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-jmx-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-junit-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-plugin-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-portlet-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-qtags-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-struts-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-tapestry-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-web-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-webwork-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-xtags-1.0.3.jar"/>
        <pathelement location="${ant.library.dir}/vendor/codehaus/xdoclet2/plugins/xdoclet-plugin-xwork-1.0.3.jar"/>
    </path>

    <!-- checkout -->
    <target name="checkout">
        <echo message="${cvs.cvsroot}"/>
        <echo message="${cvs.branch}"/>
        <echo message="${cvs.modules}"/>
        <sleep seconds="3"/>
        <!-- source trees -->
        <cvs cvsroot="${cvs.cvsroot}" dest="${basedir}"
                command="checkout" compressionlevel="${cvs.compressionlevel}"
                tag="${cvs.branch}" package="${cvs.modules}"/>
    </target>

    <!-- delete output -->
    <target name="clean">
        <delete dir="${target.dir}"/>
    </target>

    <!-- compile -->
    <target name="compile" depends="init,process-resources,generate">
        <!-- common/codebase -->
        <javac srcdir="${thinkparity.common.home}/codebase/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- common/model -->
        <javac srcdir="${thinkparity.common.home}/model/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- remote/codebase -->
        <javac srcdir="remote/codebase/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- remote/model -->
        <javac srcdir="remote/model/src/main/java"
                destdir="${target.classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="compile.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
    </target>

    <target name="generate-compile">
        <!-- common/xdoclet -->
        <javac srcdir="${thinkparity.common.home}/xdoclet/src/main/java"
                destdir="${target.generate-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="xdoclet.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
    </target>

    <target name="generate-process-resources">
        <!-- common/xdoclet -->
        <copy todir="${target.generate-classes.dir}">
            <fileset dir="${thinkparity.common.home}/xdoclet/src/main/resources"/>
        </copy>
    </target>

    <target name="generate" depends="generate-process-resources,generate-compile">
        <taskdef name="xdoclet" classname="org.xdoclet.ant.XDocletTask"
                classpathref="xdoclet.classpath"/>
        <xdoclet>
            <fileset dir="${basedir}/remote/model/src/main/java">
                <include name="**/*.java"/>
                <!--
                    note that qdox does not support enums with constructors and
                    or methods
                    http://jira.codehaus.org/browse/QDOX-94
                -->
                <exclude name="com/thinkparity/model/artifact/Artifact.java"/>
                <exclude name="com/thinkparity/model/artifact/ArtifactType.java"/>
                <exclude name="com/thinkparity/desdemona/model/contact/invitation/Attachment.java"/>
                <exclude name="com/thinkparity/desdemona/wildfire/handler/IQAction.java"/>
                <exclude name="com/thinkparity/desdemona/util/dom4j/ElementName.java"/>
                <exclude name="com/thinkparity/desdemona/util/dom4j/NamespaceName.java"/>
                <exclude name="com/thinkparity/ophelia/model/audit/AuditEventType.java"/>
                <exclude name="com/thinkparity/ophelia/model/container/monitor/PublishStep.java"/>
                <exclude name="com/thinkparity/ophelia/model/container/monitor/RestoreBackupStep.java"/>
                <exclude name="com/thinkparity/ophelia/model/io/md/MetaDataType.java"/>
                <exclude name="com/thinkparity/ophelia/model/util/localization/L18nResource.java"/>
                <exclude name="com/thinkparity/ophelia/model/util/localization/LocalizationContext.java"/>
                <exclude name="com/thinkparity/ophelia/model/workspace/monitor/InitializeStep.java"/>
            </fileset>
            <component classname="org.xdoclet.plugin.jivehandler.JiveHandlerPlugin"
                destdir="${target.classes.dir}"/>
        </xdoclet>
    </target>

    <!-- print help -->
    <target name="help">
        <echo>
Build Configuration:
    Build Id:                   ${thinkparity.build-id}
    Compiler Arguments:         ${javac.compilerargs}
    Compiler Debugging:         ${javac.debug} ${javac.debug-level}
    Java JVM Debug:             ${java.jvmarg-debug}
Local Configuration:            ${localconfig}
    Source Control Credentials: XXXXXXXXXXXXXXXXXXXXXXXXXX
    Environment:                ${thinkparity.environment}
    Mode:                       ${thinkparity.mode}
    Operating System:           ${thinkparity.os}
    Operating System Platform:  ${thinkparity.os-platform}
    Product Name:               ${thinkparity.product-name}
    Release Name:               ${thinkparity.release-name}
Targets:
    analyze                     Analyze the source.   
    checkout                    Checkout the source.
    clean                       Delete output.
    compile                     Compile source.
    javadoc                     Generate javadoc (html) documentation.
    process-resources           Process resources.
    test                        Run tests.
    test-compile                Compile the test source.
    test-process-resources      Process test resources.
Examples:
    First Run:
    ant checkout test           Will grab all source from cvs; process all
                                resources; compile all code and run all tests.

    Subsequent Runs:
    ant test                    Will process all resources; compile all code; run
                                all tests.
        </echo>
    </target>

    <!-- initialize -->
    <target name="init">
        <mkdir dir="${target.analyze-report.dir}"/>
        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.generate-classes.dir}"/>
        <mkdir dir="${target.javadoc.dir}"/>
        <mkdir dir="${target.package.dir}"/>
        <mkdir dir="${target.test-classes.dir}"/>
        <mkdir dir="${target.test-javadoc.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-sessions.dir}"/>
        <sleep seconds="1"/>
    </target>

    <!-- process resources -->
    <target name="process-resources">
        <!-- common/codebase -->
        <copy todir="${target.classes.dir}">
            <fileset dir="${thinkparity.common.home}/codebase/src/main/resources"/>
            <fileset dir="${thinkparity.common.home}/model/src/main/resources"/>
            <fileset dir="${basedir}/remote/model/src/main/resources"/>
        </copy>
        <copy todir="${target.classes.dir}">
            <fileset dir="${basedir}/remote/model/src/main/filters"/>
            <filterset begintoken="$${" endtoken="}">
                <filter token="thinkparity.product-name" value="${thinkparity.product-name}"/>
                <filter token="thinkparity.release-name" value="${thinkparity.release-name}"/>
                <filter token="thinkparity.build-id" value="${thinkparity.build-id}"/>
                <filtersfile file="${basedir}/build.filters"/>
            </filterset>
        </copy>
    </target>

    <!-- unit test -->
    <target name="test" depends="test-compile">
        <!-- if junitx.log4j.* is not set; use defaults; otherwise use the
            values themselves -->
        <condition property="inner.junitx.log4j.level"
                value="${junitx.log4j.level}" else="INFO">
            <isset property="junitx.log4j.level"/>
        </condition>
        <condition property="inner.junitx.log4j.console"
                value="${junitx.log4j.console}" else="false">
            <isset property="junitx.log4j.console"/>
        </condition>
        <condition property="inner.test"
                value="**/${test}Test.class" else="**/*Test.class">
            <isset property="test"/>
        </condition>

        <junit fork="on" forkmode="once" reloading="false"
                errorproperty="junit.didError" failureproperty="junit.didFail">
            <jvmarg value="-Dthinkparity.mode=${thinkparity.mode}"/>
            <jvmarg value="-Djunitx.log4j.level=${inner.junitx.log4j.level}"/>
            <jvmarg value="-Djunitx.log4j.console=${inner.junitx.log4j.console}"/>

            <classpath refid="project.test-classpath"/>
            <formatter type="brief" usefile="false"/>

            <!-- execute batch tests -->
            <batchtest todir="${target.test-sessions.dir}">
                <formatter type="xml"/>
                <fileset dir="${target.test-classes.dir}/remote/model" includes="${inner.test}"/>
            </batchtest>
        </junit>
        <delete dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <junitreport todir="${target.test-report.dir}">
            <fileset dir="${target.test-sessions.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report styledir="${basedir}" format="noframes" todir="${target.test-report.dir}"/>
        </junitreport>

        <fail message="JUnit failure." if="junit.didFail"/>
        <fail message="JUnit error." if="junit.didError"/>
    </target>

    <!-- unit test report -->
    <target name="test-report">
        <delete dir="${target.test-report.dir}"/>
        <mkdir dir="${target.test-report.dir}"/>
        <junitreport todir="${target.test-report.dir}">
            <fileset dir="${target.test-sessions.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report styledir="${basedir}" format="noframes" todir="${target.test-report.dir}"/>
        </junitreport>
    </target>

    <!-- compile tests -->
    <target name="test-compile" depends="compile,test-process-resources">
        <!-- common/junitx -->
        <javac srcdir="${thinkparity.common.home}/junitx/src/main/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- common/codebase -->
        <javac srcdir="${thinkparity.common.home}/codebase/src/test/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <!-- remote/model -->
        <javac srcdir="remote/model/src/test/java"
                destdir="${target.test-classes.dir}" debug="${javac.debug}"
                debuglevel="${javac.debug-level}">
            <classpath refid="test.classpath"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
    </target>

    <!-- process test resources -->
    <target name="test-process-resources">
        <copy todir="${target.test-classes.dir}">
            <fileset dir="${thinkparity.common.home}/junitx/src/main/resources"/>
        </copy>
    </target>

    <!-- package -->
    <target name="package" depends="compile">
        <property name="thinkparity.target.classes-dir" value="${target.classes.dir}"/>
        <property name="thinkparity.target.generate-classes-dir" value="${target.generate-classes.dir}"/>
        <property name="thinkparity.target.package-dir" value="${target.package.dir}"/>
        <property name="thinkparity.plugin-name" value="${thinkparity.product-name}-${thinkparity.release-name}.jar"/>
        <delete file="${target.package.dir}/${thinkparity.plugin-name}.MD5"/>
        <delete file="${target.package.dir}/${thinkparity.plugin-name}.SHA"/>   
        <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy"
            classpathref="groovy.classpath"/>
        <groovy src="${basedir}/remote/model/src/main/groovy/PackageTask.groovy"/>   
        <checksum file="${target.package.dir}/${thinkparity.plugin-name}" algorithm="MD5"/>
        <checksum file="${target.package.dir}/${thinkparity.plugin-name}" algorithm="SHA"/>
    </target>

    <!-- install the package into the wildfire environment -->
    <target name="install-package" depends="package">
        <property name="thinkparity.plugin-name" value="${thinkparity.product-name}-${thinkparity.release-name}.jar"/>
        <delete includeemptydirs="true">
            <fileset dir="${wildfire.home}/plugins" casesensitive="false">
                <include name="${thinkparity.product-name}-${thinkparity.release-name}*/**"/>
            </fileset>
        </delete>
        <copy file="${target.package.dir}/${thinkparity.plugin-name}"
            todir="${wildfire.home}/plugins"/>
    </target>

    <!-- pathinfo -->
    <target name="pathinfo">
        <pathconvert refid="compile.classpath" property="tmp.cc"/>
        <echo>
Compile Classpath:
${tmp.cc}
        </echo>
        <pathconvert refid="test.classpath" property="tmp.tc"/>
        <echo>
Test Classpath:
${tmp.tc}
        </echo>
        <pathconvert refid="runtime.classpath" property="tmp.rc"/>
        <echo>
Runtime Classpath:
${tmp.rc}
        </echo>
        <pathconvert refid="runtime.dependencies-java" property="tmp.rdj"/>
        <echo>
Runtime Dependencies (Java):
${tmp.rdj}
        </echo>
        <pathconvert refid="test.dependencies-java" property="tmp.tdj"/>
        <echo>
Test Dependencies (Java):
${tmp.tdj}
        </echo>
    </target>

    <!-- package-localization -->
    <target name="package-localization" depends="compile">
        <property name="zip-file" value="${target.package.dir}/thinkParity_Messages.zip"/>
        <delete file="${zip-file}"/>
        <zip destfile="${zip-file}" comment="${thinkparity.build-id}">
            <fileset dir="${target.classes.dir}">
                <!-- note the deliberate inclusion of default messages only -->
                <include name="localization/*_Messages.properties"/>
                <exclude name="localization/Error_Messages.properties"/>
                <exclude name="localization/FuzzyDateFormat_Messages.properties"/>
                <exclude name="localization/Model_Messages.properties"/>
            </fileset>
        </zip>
    </target>
</project>
